// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.1-0.20240802201120-fdf32da8560e DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Fuzz defines model for Fuzz.
type Fuzz struct {
	Column1  *time.Time          `json:"column1"`
	Column10 *interface{}        `json:"column10,omitempty"`
	Column11 *interface{}        `json:"column11,omitempty"`
	Column12 *int64              `json:"column12"`
	Column13 *int64              `json:"column13"`
	Column14 *int64              `json:"column14"`
	Column15 *interface{}        `json:"column15,omitempty"`
	Column16 *interface{}        `json:"column16,omitempty"`
	Column17 *interface{}        `json:"column17,omitempty"`
	Column18 *interface{}        `json:"column18,omitempty"`
	Column19 *float64            `json:"column19"`
	Column2  *time.Time          `json:"column2"`
	Column20 *float64            `json:"column20"`
	Column21 *float64            `json:"column21"`
	Column22 *float64            `json:"column22"`
	Column23 *interface{}        `json:"column23,omitempty"`
	Column24 *bool               `json:"column24,omitempty"`
	Column25 *map[string][]int32 `json:"column25,omitempty"`
	Column26 *openapi_types.UUID `json:"column26"`
	Column27 *map[string]*string `json:"column27,omitempty"`
	Column28 *struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
	} `json:"column28,omitempty"`
	Column29 *[]struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
	} `json:"column29,omitempty"`
	Column3  *map[string]interface{} `json:"column3"`
	Column30 *struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
		Z *float64 `json:"Z,omitempty"`
	} `json:"column30,omitempty"`
	Column31 *struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
		Z *float64 `json:"Z,omitempty"`
	} `json:"column31,omitempty"`
	Column32 *string                 `json:"column32"`
	Column33 *[]byte                 `json:"column33"`
	Column4  *map[string]interface{} `json:"column4"`
	Column5  *[]string               `json:"column5,omitempty"`
	Column6  *[]string               `json:"column6,omitempty"`
	Column7  *string                 `json:"column7,omitempty"`
	Column8  *string                 `json:"column8,omitempty"`
	Column9  *interface{}            `json:"column9,omitempty"`
	Id       *openapi_types.UUID     `json:"id,omitempty"`
}

// LocationHistory defines model for LocationHistory.
type LocationHistory struct {
	CreatedAt                   *time.Time             `json:"created_at,omitempty"`
	DeletedAt                   *time.Time             `json:"deleted_at"`
	Id                          *openapi_types.UUID    `json:"id,omitempty"`
	ParentPhysicalThingId       *openapi_types.UUID    `json:"parent_physical_thing_id"`
	ParentPhysicalThingIdObject *NullablePhysicalThing `json:"parent_physical_thing_id_object,omitempty"`
	Point                       *struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
	} `json:"point,omitempty"`
	Polygon *[]struct {
		X *float64 `json:"X,omitempty"`
		Y *float64 `json:"Y,omitempty"`
	} `json:"polygon,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// LogicalThing defines model for LogicalThing.
type LogicalThing struct {
	CreatedAt                   *time.Time              `json:"created_at,omitempty"`
	DeletedAt                   *time.Time              `json:"deleted_at"`
	ExternalId                  *string                 `json:"external_id,omitempty"`
	Id                          *openapi_types.UUID     `json:"id,omitempty"`
	Metadata                    *map[string]*string     `json:"metadata,omitempty"`
	Name                        *string                 `json:"name,omitempty"`
	ParentLogicalThingId        *openapi_types.UUID     `json:"parent_logical_thing_id"`
	ParentLogicalThingIdObject  *NullableLogicalThing   `json:"parent_logical_thing_id_object,omitempty"`
	ParentPhysicalThingId       *openapi_types.UUID     `json:"parent_physical_thing_id"`
	ParentPhysicalThingIdObject *NullablePhysicalThing  `json:"parent_physical_thing_id_object,omitempty"`
	RawData                     *map[string]interface{} `json:"raw_data"`
	Tags                        *[]string               `json:"tags,omitempty"`
	Type                        *string                 `json:"type,omitempty"`
	UpdatedAt                   *time.Time              `json:"updated_at,omitempty"`
}

// NullableLogicalThing defines model for NullableLogicalThing.
type NullableLogicalThing = LogicalThing

// NullablePhysicalThing defines model for NullablePhysicalThing.
type NullablePhysicalThing = PhysicalThing

// PhysicalThing defines model for PhysicalThing.
type PhysicalThing struct {
	CreatedAt  *time.Time              `json:"created_at,omitempty"`
	DeletedAt  *time.Time              `json:"deleted_at"`
	ExternalId *string                 `json:"external_id,omitempty"`
	Id         *openapi_types.UUID     `json:"id,omitempty"`
	Metadata   *map[string]*string     `json:"metadata,omitempty"`
	Name       *string                 `json:"name,omitempty"`
	RawData    *map[string]interface{} `json:"raw_data"`
	Tags       *[]string               `json:"tags,omitempty"`
	Type       *string                 `json:"type,omitempty"`
	UpdatedAt  *time.Time              `json:"updated_at,omitempty"`
}

// GetFuzzesParams defines parameters for GetFuzzes.
type GetFuzzesParams struct {
	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// Column1Eq SQL = operator
	Column1Eq *time.Time `form:"column1__eq,omitempty" json:"column1__eq,omitempty"`

	// Column1Ne SQL != operator
	Column1Ne *time.Time `form:"column1__ne,omitempty" json:"column1__ne,omitempty"`

	// Column1Gt SQL > operator, may not work with all column types
	Column1Gt *time.Time `form:"column1__gt,omitempty" json:"column1__gt,omitempty"`

	// Column1Gte SQL >= operator, may not work with all column types
	Column1Gte *time.Time `form:"column1__gte,omitempty" json:"column1__gte,omitempty"`

	// Column1Lt SQL < operator, may not work with all column types
	Column1Lt *time.Time `form:"column1__lt,omitempty" json:"column1__lt,omitempty"`

	// Column1Lte SQL <= operator, may not work with all column types
	Column1Lte *time.Time `form:"column1__lte,omitempty" json:"column1__lte,omitempty"`

	// Column1In SQL IN operator, permits comma-separated values
	Column1In *time.Time `form:"column1__in,omitempty" json:"column1__in,omitempty"`

	// Column1Nin SQL NOT IN operator, permits comma-separated values
	Column1Nin *time.Time `form:"column1__nin,omitempty" json:"column1__nin,omitempty"`

	// Column1Notin SQL NOT IN operator, permits comma-separated values
	Column1Notin *time.Time `form:"column1__notin,omitempty" json:"column1__notin,omitempty"`

	// Column1Isnull SQL IS NULL operator, value is ignored
	Column1Isnull *time.Time `form:"column1__isnull,omitempty" json:"column1__isnull,omitempty"`

	// Column1Nisnull SQL IS NOT NULL operator, value is ignored
	Column1Nisnull *time.Time `form:"column1__nisnull,omitempty" json:"column1__nisnull,omitempty"`

	// Column1Isnotnull SQL IS NOT NULL operator, value is ignored
	Column1Isnotnull *time.Time `form:"column1__isnotnull,omitempty" json:"column1__isnotnull,omitempty"`

	// Column1L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column1L *time.Time `form:"column1__l,omitempty" json:"column1__l,omitempty"`

	// Column1Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column1Like *time.Time `form:"column1__like,omitempty" json:"column1__like,omitempty"`

	// Column1Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column1Nl *time.Time `form:"column1__nl,omitempty" json:"column1__nl,omitempty"`

	// Column1Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column1Nlike *time.Time `form:"column1__nlike,omitempty" json:"column1__nlike,omitempty"`

	// Column1Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column1Notlike *time.Time `form:"column1__notlike,omitempty" json:"column1__notlike,omitempty"`

	// Column1Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column1Il *time.Time `form:"column1__il,omitempty" json:"column1__il,omitempty"`

	// Column1Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column1Ilike *time.Time `form:"column1__ilike,omitempty" json:"column1__ilike,omitempty"`

	// Column1Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column1Nil *time.Time `form:"column1__nil,omitempty" json:"column1__nil,omitempty"`

	// Column1Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column1Nilike *time.Time `form:"column1__nilike,omitempty" json:"column1__nilike,omitempty"`

	// Column1Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column1Notilike *time.Time `form:"column1__notilike,omitempty" json:"column1__notilike,omitempty"`

	// Column2Eq SQL = operator
	Column2Eq *time.Time `form:"column2__eq,omitempty" json:"column2__eq,omitempty"`

	// Column2Ne SQL != operator
	Column2Ne *time.Time `form:"column2__ne,omitempty" json:"column2__ne,omitempty"`

	// Column2Gt SQL > operator, may not work with all column types
	Column2Gt *time.Time `form:"column2__gt,omitempty" json:"column2__gt,omitempty"`

	// Column2Gte SQL >= operator, may not work with all column types
	Column2Gte *time.Time `form:"column2__gte,omitempty" json:"column2__gte,omitempty"`

	// Column2Lt SQL < operator, may not work with all column types
	Column2Lt *time.Time `form:"column2__lt,omitempty" json:"column2__lt,omitempty"`

	// Column2Lte SQL <= operator, may not work with all column types
	Column2Lte *time.Time `form:"column2__lte,omitempty" json:"column2__lte,omitempty"`

	// Column2In SQL IN operator, permits comma-separated values
	Column2In *time.Time `form:"column2__in,omitempty" json:"column2__in,omitempty"`

	// Column2Nin SQL NOT IN operator, permits comma-separated values
	Column2Nin *time.Time `form:"column2__nin,omitempty" json:"column2__nin,omitempty"`

	// Column2Notin SQL NOT IN operator, permits comma-separated values
	Column2Notin *time.Time `form:"column2__notin,omitempty" json:"column2__notin,omitempty"`

	// Column2Isnull SQL IS NULL operator, value is ignored
	Column2Isnull *time.Time `form:"column2__isnull,omitempty" json:"column2__isnull,omitempty"`

	// Column2Nisnull SQL IS NOT NULL operator, value is ignored
	Column2Nisnull *time.Time `form:"column2__nisnull,omitempty" json:"column2__nisnull,omitempty"`

	// Column2Isnotnull SQL IS NOT NULL operator, value is ignored
	Column2Isnotnull *time.Time `form:"column2__isnotnull,omitempty" json:"column2__isnotnull,omitempty"`

	// Column2L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column2L *time.Time `form:"column2__l,omitempty" json:"column2__l,omitempty"`

	// Column2Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column2Like *time.Time `form:"column2__like,omitempty" json:"column2__like,omitempty"`

	// Column2Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column2Nl *time.Time `form:"column2__nl,omitempty" json:"column2__nl,omitempty"`

	// Column2Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column2Nlike *time.Time `form:"column2__nlike,omitempty" json:"column2__nlike,omitempty"`

	// Column2Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column2Notlike *time.Time `form:"column2__notlike,omitempty" json:"column2__notlike,omitempty"`

	// Column2Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column2Il *time.Time `form:"column2__il,omitempty" json:"column2__il,omitempty"`

	// Column2Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column2Ilike *time.Time `form:"column2__ilike,omitempty" json:"column2__ilike,omitempty"`

	// Column2Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column2Nil *time.Time `form:"column2__nil,omitempty" json:"column2__nil,omitempty"`

	// Column2Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column2Nilike *time.Time `form:"column2__nilike,omitempty" json:"column2__nilike,omitempty"`

	// Column2Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column2Notilike *time.Time `form:"column2__notilike,omitempty" json:"column2__notilike,omitempty"`

	// Column7Eq SQL = operator
	Column7Eq *string `form:"column7__eq,omitempty" json:"column7__eq,omitempty"`

	// Column7Ne SQL != operator
	Column7Ne *string `form:"column7__ne,omitempty" json:"column7__ne,omitempty"`

	// Column7Gt SQL > operator, may not work with all column types
	Column7Gt *string `form:"column7__gt,omitempty" json:"column7__gt,omitempty"`

	// Column7Gte SQL >= operator, may not work with all column types
	Column7Gte *string `form:"column7__gte,omitempty" json:"column7__gte,omitempty"`

	// Column7Lt SQL < operator, may not work with all column types
	Column7Lt *string `form:"column7__lt,omitempty" json:"column7__lt,omitempty"`

	// Column7Lte SQL <= operator, may not work with all column types
	Column7Lte *string `form:"column7__lte,omitempty" json:"column7__lte,omitempty"`

	// Column7In SQL IN operator, permits comma-separated values
	Column7In *string `form:"column7__in,omitempty" json:"column7__in,omitempty"`

	// Column7Nin SQL NOT IN operator, permits comma-separated values
	Column7Nin *string `form:"column7__nin,omitempty" json:"column7__nin,omitempty"`

	// Column7Notin SQL NOT IN operator, permits comma-separated values
	Column7Notin *string `form:"column7__notin,omitempty" json:"column7__notin,omitempty"`

	// Column7Isnull SQL IS NULL operator, value is ignored
	Column7Isnull *string `form:"column7__isnull,omitempty" json:"column7__isnull,omitempty"`

	// Column7Nisnull SQL IS NOT NULL operator, value is ignored
	Column7Nisnull *string `form:"column7__nisnull,omitempty" json:"column7__nisnull,omitempty"`

	// Column7Isnotnull SQL IS NOT NULL operator, value is ignored
	Column7Isnotnull *string `form:"column7__isnotnull,omitempty" json:"column7__isnotnull,omitempty"`

	// Column7L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column7L *string `form:"column7__l,omitempty" json:"column7__l,omitempty"`

	// Column7Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column7Like *string `form:"column7__like,omitempty" json:"column7__like,omitempty"`

	// Column7Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column7Nl *string `form:"column7__nl,omitempty" json:"column7__nl,omitempty"`

	// Column7Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column7Nlike *string `form:"column7__nlike,omitempty" json:"column7__nlike,omitempty"`

	// Column7Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column7Notlike *string `form:"column7__notlike,omitempty" json:"column7__notlike,omitempty"`

	// Column7Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column7Il *string `form:"column7__il,omitempty" json:"column7__il,omitempty"`

	// Column7Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column7Ilike *string `form:"column7__ilike,omitempty" json:"column7__ilike,omitempty"`

	// Column7Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column7Nil *string `form:"column7__nil,omitempty" json:"column7__nil,omitempty"`

	// Column7Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column7Nilike *string `form:"column7__nilike,omitempty" json:"column7__nilike,omitempty"`

	// Column7Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column7Notilike *string `form:"column7__notilike,omitempty" json:"column7__notilike,omitempty"`

	// Column8Eq SQL = operator
	Column8Eq *string `form:"column8__eq,omitempty" json:"column8__eq,omitempty"`

	// Column8Ne SQL != operator
	Column8Ne *string `form:"column8__ne,omitempty" json:"column8__ne,omitempty"`

	// Column8Gt SQL > operator, may not work with all column types
	Column8Gt *string `form:"column8__gt,omitempty" json:"column8__gt,omitempty"`

	// Column8Gte SQL >= operator, may not work with all column types
	Column8Gte *string `form:"column8__gte,omitempty" json:"column8__gte,omitempty"`

	// Column8Lt SQL < operator, may not work with all column types
	Column8Lt *string `form:"column8__lt,omitempty" json:"column8__lt,omitempty"`

	// Column8Lte SQL <= operator, may not work with all column types
	Column8Lte *string `form:"column8__lte,omitempty" json:"column8__lte,omitempty"`

	// Column8In SQL IN operator, permits comma-separated values
	Column8In *string `form:"column8__in,omitempty" json:"column8__in,omitempty"`

	// Column8Nin SQL NOT IN operator, permits comma-separated values
	Column8Nin *string `form:"column8__nin,omitempty" json:"column8__nin,omitempty"`

	// Column8Notin SQL NOT IN operator, permits comma-separated values
	Column8Notin *string `form:"column8__notin,omitempty" json:"column8__notin,omitempty"`

	// Column8Isnull SQL IS NULL operator, value is ignored
	Column8Isnull *string `form:"column8__isnull,omitempty" json:"column8__isnull,omitempty"`

	// Column8Nisnull SQL IS NOT NULL operator, value is ignored
	Column8Nisnull *string `form:"column8__nisnull,omitempty" json:"column8__nisnull,omitempty"`

	// Column8Isnotnull SQL IS NOT NULL operator, value is ignored
	Column8Isnotnull *string `form:"column8__isnotnull,omitempty" json:"column8__isnotnull,omitempty"`

	// Column8L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column8L *string `form:"column8__l,omitempty" json:"column8__l,omitempty"`

	// Column8Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column8Like *string `form:"column8__like,omitempty" json:"column8__like,omitempty"`

	// Column8Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column8Nl *string `form:"column8__nl,omitempty" json:"column8__nl,omitempty"`

	// Column8Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column8Nlike *string `form:"column8__nlike,omitempty" json:"column8__nlike,omitempty"`

	// Column8Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column8Notlike *string `form:"column8__notlike,omitempty" json:"column8__notlike,omitempty"`

	// Column8Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column8Il *string `form:"column8__il,omitempty" json:"column8__il,omitempty"`

	// Column8Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column8Ilike *string `form:"column8__ilike,omitempty" json:"column8__ilike,omitempty"`

	// Column8Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column8Nil *string `form:"column8__nil,omitempty" json:"column8__nil,omitempty"`

	// Column8Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column8Nilike *string `form:"column8__nilike,omitempty" json:"column8__nilike,omitempty"`

	// Column8Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column8Notilike *string `form:"column8__notilike,omitempty" json:"column8__notilike,omitempty"`

	// Column12Eq SQL = operator
	Column12Eq *int64 `form:"column12__eq,omitempty" json:"column12__eq,omitempty"`

	// Column12Ne SQL != operator
	Column12Ne *int64 `form:"column12__ne,omitempty" json:"column12__ne,omitempty"`

	// Column12Gt SQL > operator, may not work with all column types
	Column12Gt *int64 `form:"column12__gt,omitempty" json:"column12__gt,omitempty"`

	// Column12Gte SQL >= operator, may not work with all column types
	Column12Gte *int64 `form:"column12__gte,omitempty" json:"column12__gte,omitempty"`

	// Column12Lt SQL < operator, may not work with all column types
	Column12Lt *int64 `form:"column12__lt,omitempty" json:"column12__lt,omitempty"`

	// Column12Lte SQL <= operator, may not work with all column types
	Column12Lte *int64 `form:"column12__lte,omitempty" json:"column12__lte,omitempty"`

	// Column12In SQL IN operator, permits comma-separated values
	Column12In *int64 `form:"column12__in,omitempty" json:"column12__in,omitempty"`

	// Column12Nin SQL NOT IN operator, permits comma-separated values
	Column12Nin *int64 `form:"column12__nin,omitempty" json:"column12__nin,omitempty"`

	// Column12Notin SQL NOT IN operator, permits comma-separated values
	Column12Notin *int64 `form:"column12__notin,omitempty" json:"column12__notin,omitempty"`

	// Column12Isnull SQL IS NULL operator, value is ignored
	Column12Isnull *int64 `form:"column12__isnull,omitempty" json:"column12__isnull,omitempty"`

	// Column12Nisnull SQL IS NOT NULL operator, value is ignored
	Column12Nisnull *int64 `form:"column12__nisnull,omitempty" json:"column12__nisnull,omitempty"`

	// Column12Isnotnull SQL IS NOT NULL operator, value is ignored
	Column12Isnotnull *int64 `form:"column12__isnotnull,omitempty" json:"column12__isnotnull,omitempty"`

	// Column12L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column12L *int64 `form:"column12__l,omitempty" json:"column12__l,omitempty"`

	// Column12Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column12Like *int64 `form:"column12__like,omitempty" json:"column12__like,omitempty"`

	// Column12Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column12Nl *int64 `form:"column12__nl,omitempty" json:"column12__nl,omitempty"`

	// Column12Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column12Nlike *int64 `form:"column12__nlike,omitempty" json:"column12__nlike,omitempty"`

	// Column12Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column12Notlike *int64 `form:"column12__notlike,omitempty" json:"column12__notlike,omitempty"`

	// Column12Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column12Il *int64 `form:"column12__il,omitempty" json:"column12__il,omitempty"`

	// Column12Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column12Ilike *int64 `form:"column12__ilike,omitempty" json:"column12__ilike,omitempty"`

	// Column12Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column12Nil *int64 `form:"column12__nil,omitempty" json:"column12__nil,omitempty"`

	// Column12Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column12Nilike *int64 `form:"column12__nilike,omitempty" json:"column12__nilike,omitempty"`

	// Column12Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column12Notilike *int64 `form:"column12__notilike,omitempty" json:"column12__notilike,omitempty"`

	// Column13Eq SQL = operator
	Column13Eq *int64 `form:"column13__eq,omitempty" json:"column13__eq,omitempty"`

	// Column13Ne SQL != operator
	Column13Ne *int64 `form:"column13__ne,omitempty" json:"column13__ne,omitempty"`

	// Column13Gt SQL > operator, may not work with all column types
	Column13Gt *int64 `form:"column13__gt,omitempty" json:"column13__gt,omitempty"`

	// Column13Gte SQL >= operator, may not work with all column types
	Column13Gte *int64 `form:"column13__gte,omitempty" json:"column13__gte,omitempty"`

	// Column13Lt SQL < operator, may not work with all column types
	Column13Lt *int64 `form:"column13__lt,omitempty" json:"column13__lt,omitempty"`

	// Column13Lte SQL <= operator, may not work with all column types
	Column13Lte *int64 `form:"column13__lte,omitempty" json:"column13__lte,omitempty"`

	// Column13In SQL IN operator, permits comma-separated values
	Column13In *int64 `form:"column13__in,omitempty" json:"column13__in,omitempty"`

	// Column13Nin SQL NOT IN operator, permits comma-separated values
	Column13Nin *int64 `form:"column13__nin,omitempty" json:"column13__nin,omitempty"`

	// Column13Notin SQL NOT IN operator, permits comma-separated values
	Column13Notin *int64 `form:"column13__notin,omitempty" json:"column13__notin,omitempty"`

	// Column13Isnull SQL IS NULL operator, value is ignored
	Column13Isnull *int64 `form:"column13__isnull,omitempty" json:"column13__isnull,omitempty"`

	// Column13Nisnull SQL IS NOT NULL operator, value is ignored
	Column13Nisnull *int64 `form:"column13__nisnull,omitempty" json:"column13__nisnull,omitempty"`

	// Column13Isnotnull SQL IS NOT NULL operator, value is ignored
	Column13Isnotnull *int64 `form:"column13__isnotnull,omitempty" json:"column13__isnotnull,omitempty"`

	// Column13L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column13L *int64 `form:"column13__l,omitempty" json:"column13__l,omitempty"`

	// Column13Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column13Like *int64 `form:"column13__like,omitempty" json:"column13__like,omitempty"`

	// Column13Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column13Nl *int64 `form:"column13__nl,omitempty" json:"column13__nl,omitempty"`

	// Column13Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column13Nlike *int64 `form:"column13__nlike,omitempty" json:"column13__nlike,omitempty"`

	// Column13Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column13Notlike *int64 `form:"column13__notlike,omitempty" json:"column13__notlike,omitempty"`

	// Column13Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column13Il *int64 `form:"column13__il,omitempty" json:"column13__il,omitempty"`

	// Column13Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column13Ilike *int64 `form:"column13__ilike,omitempty" json:"column13__ilike,omitempty"`

	// Column13Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column13Nil *int64 `form:"column13__nil,omitempty" json:"column13__nil,omitempty"`

	// Column13Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column13Nilike *int64 `form:"column13__nilike,omitempty" json:"column13__nilike,omitempty"`

	// Column13Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column13Notilike *int64 `form:"column13__notilike,omitempty" json:"column13__notilike,omitempty"`

	// Column14Eq SQL = operator
	Column14Eq *int64 `form:"column14__eq,omitempty" json:"column14__eq,omitempty"`

	// Column14Ne SQL != operator
	Column14Ne *int64 `form:"column14__ne,omitempty" json:"column14__ne,omitempty"`

	// Column14Gt SQL > operator, may not work with all column types
	Column14Gt *int64 `form:"column14__gt,omitempty" json:"column14__gt,omitempty"`

	// Column14Gte SQL >= operator, may not work with all column types
	Column14Gte *int64 `form:"column14__gte,omitempty" json:"column14__gte,omitempty"`

	// Column14Lt SQL < operator, may not work with all column types
	Column14Lt *int64 `form:"column14__lt,omitempty" json:"column14__lt,omitempty"`

	// Column14Lte SQL <= operator, may not work with all column types
	Column14Lte *int64 `form:"column14__lte,omitempty" json:"column14__lte,omitempty"`

	// Column14In SQL IN operator, permits comma-separated values
	Column14In *int64 `form:"column14__in,omitempty" json:"column14__in,omitempty"`

	// Column14Nin SQL NOT IN operator, permits comma-separated values
	Column14Nin *int64 `form:"column14__nin,omitempty" json:"column14__nin,omitempty"`

	// Column14Notin SQL NOT IN operator, permits comma-separated values
	Column14Notin *int64 `form:"column14__notin,omitempty" json:"column14__notin,omitempty"`

	// Column14Isnull SQL IS NULL operator, value is ignored
	Column14Isnull *int64 `form:"column14__isnull,omitempty" json:"column14__isnull,omitempty"`

	// Column14Nisnull SQL IS NOT NULL operator, value is ignored
	Column14Nisnull *int64 `form:"column14__nisnull,omitempty" json:"column14__nisnull,omitempty"`

	// Column14Isnotnull SQL IS NOT NULL operator, value is ignored
	Column14Isnotnull *int64 `form:"column14__isnotnull,omitempty" json:"column14__isnotnull,omitempty"`

	// Column14L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column14L *int64 `form:"column14__l,omitempty" json:"column14__l,omitempty"`

	// Column14Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column14Like *int64 `form:"column14__like,omitempty" json:"column14__like,omitempty"`

	// Column14Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column14Nl *int64 `form:"column14__nl,omitempty" json:"column14__nl,omitempty"`

	// Column14Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column14Nlike *int64 `form:"column14__nlike,omitempty" json:"column14__nlike,omitempty"`

	// Column14Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column14Notlike *int64 `form:"column14__notlike,omitempty" json:"column14__notlike,omitempty"`

	// Column14Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column14Il *int64 `form:"column14__il,omitempty" json:"column14__il,omitempty"`

	// Column14Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column14Ilike *int64 `form:"column14__ilike,omitempty" json:"column14__ilike,omitempty"`

	// Column14Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column14Nil *int64 `form:"column14__nil,omitempty" json:"column14__nil,omitempty"`

	// Column14Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column14Nilike *int64 `form:"column14__nilike,omitempty" json:"column14__nilike,omitempty"`

	// Column14Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column14Notilike *int64 `form:"column14__notilike,omitempty" json:"column14__notilike,omitempty"`

	// Column19Eq SQL = operator
	Column19Eq *float64 `form:"column19__eq,omitempty" json:"column19__eq,omitempty"`

	// Column19Ne SQL != operator
	Column19Ne *float64 `form:"column19__ne,omitempty" json:"column19__ne,omitempty"`

	// Column19Gt SQL > operator, may not work with all column types
	Column19Gt *float64 `form:"column19__gt,omitempty" json:"column19__gt,omitempty"`

	// Column19Gte SQL >= operator, may not work with all column types
	Column19Gte *float64 `form:"column19__gte,omitempty" json:"column19__gte,omitempty"`

	// Column19Lt SQL < operator, may not work with all column types
	Column19Lt *float64 `form:"column19__lt,omitempty" json:"column19__lt,omitempty"`

	// Column19Lte SQL <= operator, may not work with all column types
	Column19Lte *float64 `form:"column19__lte,omitempty" json:"column19__lte,omitempty"`

	// Column19In SQL IN operator, permits comma-separated values
	Column19In *float64 `form:"column19__in,omitempty" json:"column19__in,omitempty"`

	// Column19Nin SQL NOT IN operator, permits comma-separated values
	Column19Nin *float64 `form:"column19__nin,omitempty" json:"column19__nin,omitempty"`

	// Column19Notin SQL NOT IN operator, permits comma-separated values
	Column19Notin *float64 `form:"column19__notin,omitempty" json:"column19__notin,omitempty"`

	// Column19Isnull SQL IS NULL operator, value is ignored
	Column19Isnull *float64 `form:"column19__isnull,omitempty" json:"column19__isnull,omitempty"`

	// Column19Nisnull SQL IS NOT NULL operator, value is ignored
	Column19Nisnull *float64 `form:"column19__nisnull,omitempty" json:"column19__nisnull,omitempty"`

	// Column19Isnotnull SQL IS NOT NULL operator, value is ignored
	Column19Isnotnull *float64 `form:"column19__isnotnull,omitempty" json:"column19__isnotnull,omitempty"`

	// Column19L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column19L *float64 `form:"column19__l,omitempty" json:"column19__l,omitempty"`

	// Column19Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column19Like *float64 `form:"column19__like,omitempty" json:"column19__like,omitempty"`

	// Column19Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column19Nl *float64 `form:"column19__nl,omitempty" json:"column19__nl,omitempty"`

	// Column19Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column19Nlike *float64 `form:"column19__nlike,omitempty" json:"column19__nlike,omitempty"`

	// Column19Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column19Notlike *float64 `form:"column19__notlike,omitempty" json:"column19__notlike,omitempty"`

	// Column19Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column19Il *float64 `form:"column19__il,omitempty" json:"column19__il,omitempty"`

	// Column19Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column19Ilike *float64 `form:"column19__ilike,omitempty" json:"column19__ilike,omitempty"`

	// Column19Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column19Nil *float64 `form:"column19__nil,omitempty" json:"column19__nil,omitempty"`

	// Column19Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column19Nilike *float64 `form:"column19__nilike,omitempty" json:"column19__nilike,omitempty"`

	// Column19Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column19Notilike *float64 `form:"column19__notilike,omitempty" json:"column19__notilike,omitempty"`

	// Column20Eq SQL = operator
	Column20Eq *float64 `form:"column20__eq,omitempty" json:"column20__eq,omitempty"`

	// Column20Ne SQL != operator
	Column20Ne *float64 `form:"column20__ne,omitempty" json:"column20__ne,omitempty"`

	// Column20Gt SQL > operator, may not work with all column types
	Column20Gt *float64 `form:"column20__gt,omitempty" json:"column20__gt,omitempty"`

	// Column20Gte SQL >= operator, may not work with all column types
	Column20Gte *float64 `form:"column20__gte,omitempty" json:"column20__gte,omitempty"`

	// Column20Lt SQL < operator, may not work with all column types
	Column20Lt *float64 `form:"column20__lt,omitempty" json:"column20__lt,omitempty"`

	// Column20Lte SQL <= operator, may not work with all column types
	Column20Lte *float64 `form:"column20__lte,omitempty" json:"column20__lte,omitempty"`

	// Column20In SQL IN operator, permits comma-separated values
	Column20In *float64 `form:"column20__in,omitempty" json:"column20__in,omitempty"`

	// Column20Nin SQL NOT IN operator, permits comma-separated values
	Column20Nin *float64 `form:"column20__nin,omitempty" json:"column20__nin,omitempty"`

	// Column20Notin SQL NOT IN operator, permits comma-separated values
	Column20Notin *float64 `form:"column20__notin,omitempty" json:"column20__notin,omitempty"`

	// Column20Isnull SQL IS NULL operator, value is ignored
	Column20Isnull *float64 `form:"column20__isnull,omitempty" json:"column20__isnull,omitempty"`

	// Column20Nisnull SQL IS NOT NULL operator, value is ignored
	Column20Nisnull *float64 `form:"column20__nisnull,omitempty" json:"column20__nisnull,omitempty"`

	// Column20Isnotnull SQL IS NOT NULL operator, value is ignored
	Column20Isnotnull *float64 `form:"column20__isnotnull,omitempty" json:"column20__isnotnull,omitempty"`

	// Column20L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column20L *float64 `form:"column20__l,omitempty" json:"column20__l,omitempty"`

	// Column20Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column20Like *float64 `form:"column20__like,omitempty" json:"column20__like,omitempty"`

	// Column20Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column20Nl *float64 `form:"column20__nl,omitempty" json:"column20__nl,omitempty"`

	// Column20Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column20Nlike *float64 `form:"column20__nlike,omitempty" json:"column20__nlike,omitempty"`

	// Column20Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column20Notlike *float64 `form:"column20__notlike,omitempty" json:"column20__notlike,omitempty"`

	// Column20Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column20Il *float64 `form:"column20__il,omitempty" json:"column20__il,omitempty"`

	// Column20Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column20Ilike *float64 `form:"column20__ilike,omitempty" json:"column20__ilike,omitempty"`

	// Column20Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column20Nil *float64 `form:"column20__nil,omitempty" json:"column20__nil,omitempty"`

	// Column20Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column20Nilike *float64 `form:"column20__nilike,omitempty" json:"column20__nilike,omitempty"`

	// Column20Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column20Notilike *float64 `form:"column20__notilike,omitempty" json:"column20__notilike,omitempty"`

	// Column21Eq SQL = operator
	Column21Eq *float64 `form:"column21__eq,omitempty" json:"column21__eq,omitempty"`

	// Column21Ne SQL != operator
	Column21Ne *float64 `form:"column21__ne,omitempty" json:"column21__ne,omitempty"`

	// Column21Gt SQL > operator, may not work with all column types
	Column21Gt *float64 `form:"column21__gt,omitempty" json:"column21__gt,omitempty"`

	// Column21Gte SQL >= operator, may not work with all column types
	Column21Gte *float64 `form:"column21__gte,omitempty" json:"column21__gte,omitempty"`

	// Column21Lt SQL < operator, may not work with all column types
	Column21Lt *float64 `form:"column21__lt,omitempty" json:"column21__lt,omitempty"`

	// Column21Lte SQL <= operator, may not work with all column types
	Column21Lte *float64 `form:"column21__lte,omitempty" json:"column21__lte,omitempty"`

	// Column21In SQL IN operator, permits comma-separated values
	Column21In *float64 `form:"column21__in,omitempty" json:"column21__in,omitempty"`

	// Column21Nin SQL NOT IN operator, permits comma-separated values
	Column21Nin *float64 `form:"column21__nin,omitempty" json:"column21__nin,omitempty"`

	// Column21Notin SQL NOT IN operator, permits comma-separated values
	Column21Notin *float64 `form:"column21__notin,omitempty" json:"column21__notin,omitempty"`

	// Column21Isnull SQL IS NULL operator, value is ignored
	Column21Isnull *float64 `form:"column21__isnull,omitempty" json:"column21__isnull,omitempty"`

	// Column21Nisnull SQL IS NOT NULL operator, value is ignored
	Column21Nisnull *float64 `form:"column21__nisnull,omitempty" json:"column21__nisnull,omitempty"`

	// Column21Isnotnull SQL IS NOT NULL operator, value is ignored
	Column21Isnotnull *float64 `form:"column21__isnotnull,omitempty" json:"column21__isnotnull,omitempty"`

	// Column21L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column21L *float64 `form:"column21__l,omitempty" json:"column21__l,omitempty"`

	// Column21Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column21Like *float64 `form:"column21__like,omitempty" json:"column21__like,omitempty"`

	// Column21Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column21Nl *float64 `form:"column21__nl,omitempty" json:"column21__nl,omitempty"`

	// Column21Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column21Nlike *float64 `form:"column21__nlike,omitempty" json:"column21__nlike,omitempty"`

	// Column21Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column21Notlike *float64 `form:"column21__notlike,omitempty" json:"column21__notlike,omitempty"`

	// Column21Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column21Il *float64 `form:"column21__il,omitempty" json:"column21__il,omitempty"`

	// Column21Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column21Ilike *float64 `form:"column21__ilike,omitempty" json:"column21__ilike,omitempty"`

	// Column21Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column21Nil *float64 `form:"column21__nil,omitempty" json:"column21__nil,omitempty"`

	// Column21Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column21Nilike *float64 `form:"column21__nilike,omitempty" json:"column21__nilike,omitempty"`

	// Column21Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column21Notilike *float64 `form:"column21__notilike,omitempty" json:"column21__notilike,omitempty"`

	// Column22Eq SQL = operator
	Column22Eq *float64 `form:"column22__eq,omitempty" json:"column22__eq,omitempty"`

	// Column22Ne SQL != operator
	Column22Ne *float64 `form:"column22__ne,omitempty" json:"column22__ne,omitempty"`

	// Column22Gt SQL > operator, may not work with all column types
	Column22Gt *float64 `form:"column22__gt,omitempty" json:"column22__gt,omitempty"`

	// Column22Gte SQL >= operator, may not work with all column types
	Column22Gte *float64 `form:"column22__gte,omitempty" json:"column22__gte,omitempty"`

	// Column22Lt SQL < operator, may not work with all column types
	Column22Lt *float64 `form:"column22__lt,omitempty" json:"column22__lt,omitempty"`

	// Column22Lte SQL <= operator, may not work with all column types
	Column22Lte *float64 `form:"column22__lte,omitempty" json:"column22__lte,omitempty"`

	// Column22In SQL IN operator, permits comma-separated values
	Column22In *float64 `form:"column22__in,omitempty" json:"column22__in,omitempty"`

	// Column22Nin SQL NOT IN operator, permits comma-separated values
	Column22Nin *float64 `form:"column22__nin,omitempty" json:"column22__nin,omitempty"`

	// Column22Notin SQL NOT IN operator, permits comma-separated values
	Column22Notin *float64 `form:"column22__notin,omitempty" json:"column22__notin,omitempty"`

	// Column22Isnull SQL IS NULL operator, value is ignored
	Column22Isnull *float64 `form:"column22__isnull,omitempty" json:"column22__isnull,omitempty"`

	// Column22Nisnull SQL IS NOT NULL operator, value is ignored
	Column22Nisnull *float64 `form:"column22__nisnull,omitempty" json:"column22__nisnull,omitempty"`

	// Column22Isnotnull SQL IS NOT NULL operator, value is ignored
	Column22Isnotnull *float64 `form:"column22__isnotnull,omitempty" json:"column22__isnotnull,omitempty"`

	// Column22L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column22L *float64 `form:"column22__l,omitempty" json:"column22__l,omitempty"`

	// Column22Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column22Like *float64 `form:"column22__like,omitempty" json:"column22__like,omitempty"`

	// Column22Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column22Nl *float64 `form:"column22__nl,omitempty" json:"column22__nl,omitempty"`

	// Column22Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column22Nlike *float64 `form:"column22__nlike,omitempty" json:"column22__nlike,omitempty"`

	// Column22Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column22Notlike *float64 `form:"column22__notlike,omitempty" json:"column22__notlike,omitempty"`

	// Column22Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column22Il *float64 `form:"column22__il,omitempty" json:"column22__il,omitempty"`

	// Column22Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column22Ilike *float64 `form:"column22__ilike,omitempty" json:"column22__ilike,omitempty"`

	// Column22Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column22Nil *float64 `form:"column22__nil,omitempty" json:"column22__nil,omitempty"`

	// Column22Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column22Nilike *float64 `form:"column22__nilike,omitempty" json:"column22__nilike,omitempty"`

	// Column22Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column22Notilike *float64 `form:"column22__notilike,omitempty" json:"column22__notilike,omitempty"`

	// Column24Eq SQL = operator
	Column24Eq *bool `form:"column24__eq,omitempty" json:"column24__eq,omitempty"`

	// Column24Ne SQL != operator
	Column24Ne *bool `form:"column24__ne,omitempty" json:"column24__ne,omitempty"`

	// Column24Gt SQL > operator, may not work with all column types
	Column24Gt *bool `form:"column24__gt,omitempty" json:"column24__gt,omitempty"`

	// Column24Gte SQL >= operator, may not work with all column types
	Column24Gte *bool `form:"column24__gte,omitempty" json:"column24__gte,omitempty"`

	// Column24Lt SQL < operator, may not work with all column types
	Column24Lt *bool `form:"column24__lt,omitempty" json:"column24__lt,omitempty"`

	// Column24Lte SQL <= operator, may not work with all column types
	Column24Lte *bool `form:"column24__lte,omitempty" json:"column24__lte,omitempty"`

	// Column24In SQL IN operator, permits comma-separated values
	Column24In *bool `form:"column24__in,omitempty" json:"column24__in,omitempty"`

	// Column24Nin SQL NOT IN operator, permits comma-separated values
	Column24Nin *bool `form:"column24__nin,omitempty" json:"column24__nin,omitempty"`

	// Column24Notin SQL NOT IN operator, permits comma-separated values
	Column24Notin *bool `form:"column24__notin,omitempty" json:"column24__notin,omitempty"`

	// Column24Isnull SQL IS NULL operator, value is ignored
	Column24Isnull *bool `form:"column24__isnull,omitempty" json:"column24__isnull,omitempty"`

	// Column24Nisnull SQL IS NOT NULL operator, value is ignored
	Column24Nisnull *bool `form:"column24__nisnull,omitempty" json:"column24__nisnull,omitempty"`

	// Column24Isnotnull SQL IS NOT NULL operator, value is ignored
	Column24Isnotnull *bool `form:"column24__isnotnull,omitempty" json:"column24__isnotnull,omitempty"`

	// Column24L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column24L *bool `form:"column24__l,omitempty" json:"column24__l,omitempty"`

	// Column24Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column24Like *bool `form:"column24__like,omitempty" json:"column24__like,omitempty"`

	// Column24Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column24Nl *bool `form:"column24__nl,omitempty" json:"column24__nl,omitempty"`

	// Column24Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column24Nlike *bool `form:"column24__nlike,omitempty" json:"column24__nlike,omitempty"`

	// Column24Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column24Notlike *bool `form:"column24__notlike,omitempty" json:"column24__notlike,omitempty"`

	// Column24Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column24Il *bool `form:"column24__il,omitempty" json:"column24__il,omitempty"`

	// Column24Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column24Ilike *bool `form:"column24__ilike,omitempty" json:"column24__ilike,omitempty"`

	// Column24Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column24Nil *bool `form:"column24__nil,omitempty" json:"column24__nil,omitempty"`

	// Column24Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column24Nilike *bool `form:"column24__nilike,omitempty" json:"column24__nilike,omitempty"`

	// Column24Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column24Notilike *bool `form:"column24__notilike,omitempty" json:"column24__notilike,omitempty"`

	// Column26Eq SQL = operator
	Column26Eq *openapi_types.UUID `form:"column26__eq,omitempty" json:"column26__eq,omitempty"`

	// Column26Ne SQL != operator
	Column26Ne *openapi_types.UUID `form:"column26__ne,omitempty" json:"column26__ne,omitempty"`

	// Column26Gt SQL > operator, may not work with all column types
	Column26Gt *openapi_types.UUID `form:"column26__gt,omitempty" json:"column26__gt,omitempty"`

	// Column26Gte SQL >= operator, may not work with all column types
	Column26Gte *openapi_types.UUID `form:"column26__gte,omitempty" json:"column26__gte,omitempty"`

	// Column26Lt SQL < operator, may not work with all column types
	Column26Lt *openapi_types.UUID `form:"column26__lt,omitempty" json:"column26__lt,omitempty"`

	// Column26Lte SQL <= operator, may not work with all column types
	Column26Lte *openapi_types.UUID `form:"column26__lte,omitempty" json:"column26__lte,omitempty"`

	// Column26In SQL IN operator, permits comma-separated values
	Column26In *openapi_types.UUID `form:"column26__in,omitempty" json:"column26__in,omitempty"`

	// Column26Nin SQL NOT IN operator, permits comma-separated values
	Column26Nin *openapi_types.UUID `form:"column26__nin,omitempty" json:"column26__nin,omitempty"`

	// Column26Notin SQL NOT IN operator, permits comma-separated values
	Column26Notin *openapi_types.UUID `form:"column26__notin,omitempty" json:"column26__notin,omitempty"`

	// Column26Isnull SQL IS NULL operator, value is ignored
	Column26Isnull *openapi_types.UUID `form:"column26__isnull,omitempty" json:"column26__isnull,omitempty"`

	// Column26Nisnull SQL IS NOT NULL operator, value is ignored
	Column26Nisnull *openapi_types.UUID `form:"column26__nisnull,omitempty" json:"column26__nisnull,omitempty"`

	// Column26Isnotnull SQL IS NOT NULL operator, value is ignored
	Column26Isnotnull *openapi_types.UUID `form:"column26__isnotnull,omitempty" json:"column26__isnotnull,omitempty"`

	// Column26L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column26L *openapi_types.UUID `form:"column26__l,omitempty" json:"column26__l,omitempty"`

	// Column26Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column26Like *openapi_types.UUID `form:"column26__like,omitempty" json:"column26__like,omitempty"`

	// Column26Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column26Nl *openapi_types.UUID `form:"column26__nl,omitempty" json:"column26__nl,omitempty"`

	// Column26Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column26Nlike *openapi_types.UUID `form:"column26__nlike,omitempty" json:"column26__nlike,omitempty"`

	// Column26Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column26Notlike *openapi_types.UUID `form:"column26__notlike,omitempty" json:"column26__notlike,omitempty"`

	// Column26Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column26Il *openapi_types.UUID `form:"column26__il,omitempty" json:"column26__il,omitempty"`

	// Column26Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column26Ilike *openapi_types.UUID `form:"column26__ilike,omitempty" json:"column26__ilike,omitempty"`

	// Column26Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column26Nil *openapi_types.UUID `form:"column26__nil,omitempty" json:"column26__nil,omitempty"`

	// Column26Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column26Nilike *openapi_types.UUID `form:"column26__nilike,omitempty" json:"column26__nilike,omitempty"`

	// Column26Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column26Notilike *openapi_types.UUID `form:"column26__notilike,omitempty" json:"column26__notilike,omitempty"`

	// Column32Eq SQL = operator
	Column32Eq *string `form:"column32__eq,omitempty" json:"column32__eq,omitempty"`

	// Column32Ne SQL != operator
	Column32Ne *string `form:"column32__ne,omitempty" json:"column32__ne,omitempty"`

	// Column32Gt SQL > operator, may not work with all column types
	Column32Gt *string `form:"column32__gt,omitempty" json:"column32__gt,omitempty"`

	// Column32Gte SQL >= operator, may not work with all column types
	Column32Gte *string `form:"column32__gte,omitempty" json:"column32__gte,omitempty"`

	// Column32Lt SQL < operator, may not work with all column types
	Column32Lt *string `form:"column32__lt,omitempty" json:"column32__lt,omitempty"`

	// Column32Lte SQL <= operator, may not work with all column types
	Column32Lte *string `form:"column32__lte,omitempty" json:"column32__lte,omitempty"`

	// Column32In SQL IN operator, permits comma-separated values
	Column32In *string `form:"column32__in,omitempty" json:"column32__in,omitempty"`

	// Column32Nin SQL NOT IN operator, permits comma-separated values
	Column32Nin *string `form:"column32__nin,omitempty" json:"column32__nin,omitempty"`

	// Column32Notin SQL NOT IN operator, permits comma-separated values
	Column32Notin *string `form:"column32__notin,omitempty" json:"column32__notin,omitempty"`

	// Column32Isnull SQL IS NULL operator, value is ignored
	Column32Isnull *string `form:"column32__isnull,omitempty" json:"column32__isnull,omitempty"`

	// Column32Nisnull SQL IS NOT NULL operator, value is ignored
	Column32Nisnull *string `form:"column32__nisnull,omitempty" json:"column32__nisnull,omitempty"`

	// Column32Isnotnull SQL IS NOT NULL operator, value is ignored
	Column32Isnotnull *string `form:"column32__isnotnull,omitempty" json:"column32__isnotnull,omitempty"`

	// Column32L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column32L *string `form:"column32__l,omitempty" json:"column32__l,omitempty"`

	// Column32Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column32Like *string `form:"column32__like,omitempty" json:"column32__like,omitempty"`

	// Column32Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column32Nl *string `form:"column32__nl,omitempty" json:"column32__nl,omitempty"`

	// Column32Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column32Nlike *string `form:"column32__nlike,omitempty" json:"column32__nlike,omitempty"`

	// Column32Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column32Notlike *string `form:"column32__notlike,omitempty" json:"column32__notlike,omitempty"`

	// Column32Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column32Il *string `form:"column32__il,omitempty" json:"column32__il,omitempty"`

	// Column32Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column32Ilike *string `form:"column32__ilike,omitempty" json:"column32__ilike,omitempty"`

	// Column32Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column32Nil *string `form:"column32__nil,omitempty" json:"column32__nil,omitempty"`

	// Column32Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column32Nilike *string `form:"column32__nilike,omitempty" json:"column32__nilike,omitempty"`

	// Column32Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column32Notilike *string `form:"column32__notilike,omitempty" json:"column32__notilike,omitempty"`

	// Column33Eq SQL = operator
	Column33Eq *[]byte `form:"column33__eq,omitempty" json:"column33__eq,omitempty"`

	// Column33Ne SQL != operator
	Column33Ne *[]byte `form:"column33__ne,omitempty" json:"column33__ne,omitempty"`

	// Column33Gt SQL > operator, may not work with all column types
	Column33Gt *[]byte `form:"column33__gt,omitempty" json:"column33__gt,omitempty"`

	// Column33Gte SQL >= operator, may not work with all column types
	Column33Gte *[]byte `form:"column33__gte,omitempty" json:"column33__gte,omitempty"`

	// Column33Lt SQL < operator, may not work with all column types
	Column33Lt *[]byte `form:"column33__lt,omitempty" json:"column33__lt,omitempty"`

	// Column33Lte SQL <= operator, may not work with all column types
	Column33Lte *[]byte `form:"column33__lte,omitempty" json:"column33__lte,omitempty"`

	// Column33In SQL IN operator, permits comma-separated values
	Column33In *[]byte `form:"column33__in,omitempty" json:"column33__in,omitempty"`

	// Column33Nin SQL NOT IN operator, permits comma-separated values
	Column33Nin *[]byte `form:"column33__nin,omitempty" json:"column33__nin,omitempty"`

	// Column33Notin SQL NOT IN operator, permits comma-separated values
	Column33Notin *[]byte `form:"column33__notin,omitempty" json:"column33__notin,omitempty"`

	// Column33Isnull SQL IS NULL operator, value is ignored
	Column33Isnull *[]byte `form:"column33__isnull,omitempty" json:"column33__isnull,omitempty"`

	// Column33Nisnull SQL IS NOT NULL operator, value is ignored
	Column33Nisnull *[]byte `form:"column33__nisnull,omitempty" json:"column33__nisnull,omitempty"`

	// Column33Isnotnull SQL IS NOT NULL operator, value is ignored
	Column33Isnotnull *[]byte `form:"column33__isnotnull,omitempty" json:"column33__isnotnull,omitempty"`

	// Column33L SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column33L *[]byte `form:"column33__l,omitempty" json:"column33__l,omitempty"`

	// Column33Like SQL LIKE operator, value is implicitly prefixed and suffixed with %
	Column33Like *[]byte `form:"column33__like,omitempty" json:"column33__like,omitempty"`

	// Column33Nl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column33Nl *[]byte `form:"column33__nl,omitempty" json:"column33__nl,omitempty"`

	// Column33Nlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column33Nlike *[]byte `form:"column33__nlike,omitempty" json:"column33__nlike,omitempty"`

	// Column33Notlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	Column33Notlike *[]byte `form:"column33__notlike,omitempty" json:"column33__notlike,omitempty"`

	// Column33Il SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column33Il *[]byte `form:"column33__il,omitempty" json:"column33__il,omitempty"`

	// Column33Ilike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	Column33Ilike *[]byte `form:"column33__ilike,omitempty" json:"column33__ilike,omitempty"`

	// Column33Nil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column33Nil *[]byte `form:"column33__nil,omitempty" json:"column33__nil,omitempty"`

	// Column33Nilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column33Nilike *[]byte `form:"column33__nilike,omitempty" json:"column33__nilike,omitempty"`

	// Column33Notilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	Column33Notilike *[]byte `form:"column33__notilike,omitempty" json:"column33__notilike,omitempty"`
}

// PostFuzzesJSONBody defines parameters for PostFuzzes.
type PostFuzzesJSONBody = []Fuzz

// GetLocationHistoriesParams defines parameters for GetLocationHistories.
type GetLocationHistoriesParams struct {
	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// CreatedAtEq SQL = operator
	CreatedAtEq *time.Time `form:"created_at__eq,omitempty" json:"created_at__eq,omitempty"`

	// CreatedAtNe SQL != operator
	CreatedAtNe *time.Time `form:"created_at__ne,omitempty" json:"created_at__ne,omitempty"`

	// CreatedAtGt SQL > operator, may not work with all column types
	CreatedAtGt *time.Time `form:"created_at__gt,omitempty" json:"created_at__gt,omitempty"`

	// CreatedAtGte SQL >= operator, may not work with all column types
	CreatedAtGte *time.Time `form:"created_at__gte,omitempty" json:"created_at__gte,omitempty"`

	// CreatedAtLt SQL < operator, may not work with all column types
	CreatedAtLt *time.Time `form:"created_at__lt,omitempty" json:"created_at__lt,omitempty"`

	// CreatedAtLte SQL <= operator, may not work with all column types
	CreatedAtLte *time.Time `form:"created_at__lte,omitempty" json:"created_at__lte,omitempty"`

	// CreatedAtIn SQL IN operator, permits comma-separated values
	CreatedAtIn *time.Time `form:"created_at__in,omitempty" json:"created_at__in,omitempty"`

	// CreatedAtNin SQL NOT IN operator, permits comma-separated values
	CreatedAtNin *time.Time `form:"created_at__nin,omitempty" json:"created_at__nin,omitempty"`

	// CreatedAtNotin SQL NOT IN operator, permits comma-separated values
	CreatedAtNotin *time.Time `form:"created_at__notin,omitempty" json:"created_at__notin,omitempty"`

	// CreatedAtIsnull SQL IS NULL operator, value is ignored
	CreatedAtIsnull *time.Time `form:"created_at__isnull,omitempty" json:"created_at__isnull,omitempty"`

	// CreatedAtNisnull SQL IS NOT NULL operator, value is ignored
	CreatedAtNisnull *time.Time `form:"created_at__nisnull,omitempty" json:"created_at__nisnull,omitempty"`

	// CreatedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	CreatedAtIsnotnull *time.Time `form:"created_at__isnotnull,omitempty" json:"created_at__isnotnull,omitempty"`

	// CreatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtL *time.Time `form:"created_at__l,omitempty" json:"created_at__l,omitempty"`

	// CreatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtLike *time.Time `form:"created_at__like,omitempty" json:"created_at__like,omitempty"`

	// CreatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNl *time.Time `form:"created_at__nl,omitempty" json:"created_at__nl,omitempty"`

	// CreatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNlike *time.Time `form:"created_at__nlike,omitempty" json:"created_at__nlike,omitempty"`

	// CreatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotlike *time.Time `form:"created_at__notlike,omitempty" json:"created_at__notlike,omitempty"`

	// CreatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIl *time.Time `form:"created_at__il,omitempty" json:"created_at__il,omitempty"`

	// CreatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIlike *time.Time `form:"created_at__ilike,omitempty" json:"created_at__ilike,omitempty"`

	// CreatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNil *time.Time `form:"created_at__nil,omitempty" json:"created_at__nil,omitempty"`

	// CreatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNilike *time.Time `form:"created_at__nilike,omitempty" json:"created_at__nilike,omitempty"`

	// CreatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotilike *time.Time `form:"created_at__notilike,omitempty" json:"created_at__notilike,omitempty"`

	// UpdatedAtEq SQL = operator
	UpdatedAtEq *time.Time `form:"updated_at__eq,omitempty" json:"updated_at__eq,omitempty"`

	// UpdatedAtNe SQL != operator
	UpdatedAtNe *time.Time `form:"updated_at__ne,omitempty" json:"updated_at__ne,omitempty"`

	// UpdatedAtGt SQL > operator, may not work with all column types
	UpdatedAtGt *time.Time `form:"updated_at__gt,omitempty" json:"updated_at__gt,omitempty"`

	// UpdatedAtGte SQL >= operator, may not work with all column types
	UpdatedAtGte *time.Time `form:"updated_at__gte,omitempty" json:"updated_at__gte,omitempty"`

	// UpdatedAtLt SQL < operator, may not work with all column types
	UpdatedAtLt *time.Time `form:"updated_at__lt,omitempty" json:"updated_at__lt,omitempty"`

	// UpdatedAtLte SQL <= operator, may not work with all column types
	UpdatedAtLte *time.Time `form:"updated_at__lte,omitempty" json:"updated_at__lte,omitempty"`

	// UpdatedAtIn SQL IN operator, permits comma-separated values
	UpdatedAtIn *time.Time `form:"updated_at__in,omitempty" json:"updated_at__in,omitempty"`

	// UpdatedAtNin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNin *time.Time `form:"updated_at__nin,omitempty" json:"updated_at__nin,omitempty"`

	// UpdatedAtNotin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNotin *time.Time `form:"updated_at__notin,omitempty" json:"updated_at__notin,omitempty"`

	// UpdatedAtIsnull SQL IS NULL operator, value is ignored
	UpdatedAtIsnull *time.Time `form:"updated_at__isnull,omitempty" json:"updated_at__isnull,omitempty"`

	// UpdatedAtNisnull SQL IS NOT NULL operator, value is ignored
	UpdatedAtNisnull *time.Time `form:"updated_at__nisnull,omitempty" json:"updated_at__nisnull,omitempty"`

	// UpdatedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	UpdatedAtIsnotnull *time.Time `form:"updated_at__isnotnull,omitempty" json:"updated_at__isnotnull,omitempty"`

	// UpdatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtL *time.Time `form:"updated_at__l,omitempty" json:"updated_at__l,omitempty"`

	// UpdatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtLike *time.Time `form:"updated_at__like,omitempty" json:"updated_at__like,omitempty"`

	// UpdatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNl *time.Time `form:"updated_at__nl,omitempty" json:"updated_at__nl,omitempty"`

	// UpdatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNlike *time.Time `form:"updated_at__nlike,omitempty" json:"updated_at__nlike,omitempty"`

	// UpdatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotlike *time.Time `form:"updated_at__notlike,omitempty" json:"updated_at__notlike,omitempty"`

	// UpdatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIl *time.Time `form:"updated_at__il,omitempty" json:"updated_at__il,omitempty"`

	// UpdatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIlike *time.Time `form:"updated_at__ilike,omitempty" json:"updated_at__ilike,omitempty"`

	// UpdatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNil *time.Time `form:"updated_at__nil,omitempty" json:"updated_at__nil,omitempty"`

	// UpdatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNilike *time.Time `form:"updated_at__nilike,omitempty" json:"updated_at__nilike,omitempty"`

	// UpdatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotilike *time.Time `form:"updated_at__notilike,omitempty" json:"updated_at__notilike,omitempty"`

	// DeletedAtEq SQL = operator
	DeletedAtEq *time.Time `form:"deleted_at__eq,omitempty" json:"deleted_at__eq,omitempty"`

	// DeletedAtNe SQL != operator
	DeletedAtNe *time.Time `form:"deleted_at__ne,omitempty" json:"deleted_at__ne,omitempty"`

	// DeletedAtGt SQL > operator, may not work with all column types
	DeletedAtGt *time.Time `form:"deleted_at__gt,omitempty" json:"deleted_at__gt,omitempty"`

	// DeletedAtGte SQL >= operator, may not work with all column types
	DeletedAtGte *time.Time `form:"deleted_at__gte,omitempty" json:"deleted_at__gte,omitempty"`

	// DeletedAtLt SQL < operator, may not work with all column types
	DeletedAtLt *time.Time `form:"deleted_at__lt,omitempty" json:"deleted_at__lt,omitempty"`

	// DeletedAtLte SQL <= operator, may not work with all column types
	DeletedAtLte *time.Time `form:"deleted_at__lte,omitempty" json:"deleted_at__lte,omitempty"`

	// DeletedAtIn SQL IN operator, permits comma-separated values
	DeletedAtIn *time.Time `form:"deleted_at__in,omitempty" json:"deleted_at__in,omitempty"`

	// DeletedAtNin SQL NOT IN operator, permits comma-separated values
	DeletedAtNin *time.Time `form:"deleted_at__nin,omitempty" json:"deleted_at__nin,omitempty"`

	// DeletedAtNotin SQL NOT IN operator, permits comma-separated values
	DeletedAtNotin *time.Time `form:"deleted_at__notin,omitempty" json:"deleted_at__notin,omitempty"`

	// DeletedAtIsnull SQL IS NULL operator, value is ignored
	DeletedAtIsnull *time.Time `form:"deleted_at__isnull,omitempty" json:"deleted_at__isnull,omitempty"`

	// DeletedAtNisnull SQL IS NOT NULL operator, value is ignored
	DeletedAtNisnull *time.Time `form:"deleted_at__nisnull,omitempty" json:"deleted_at__nisnull,omitempty"`

	// DeletedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	DeletedAtIsnotnull *time.Time `form:"deleted_at__isnotnull,omitempty" json:"deleted_at__isnotnull,omitempty"`

	// DeletedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtL *time.Time `form:"deleted_at__l,omitempty" json:"deleted_at__l,omitempty"`

	// DeletedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtLike *time.Time `form:"deleted_at__like,omitempty" json:"deleted_at__like,omitempty"`

	// DeletedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNl *time.Time `form:"deleted_at__nl,omitempty" json:"deleted_at__nl,omitempty"`

	// DeletedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNlike *time.Time `form:"deleted_at__nlike,omitempty" json:"deleted_at__nlike,omitempty"`

	// DeletedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotlike *time.Time `form:"deleted_at__notlike,omitempty" json:"deleted_at__notlike,omitempty"`

	// DeletedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIl *time.Time `form:"deleted_at__il,omitempty" json:"deleted_at__il,omitempty"`

	// DeletedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIlike *time.Time `form:"deleted_at__ilike,omitempty" json:"deleted_at__ilike,omitempty"`

	// DeletedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNil *time.Time `form:"deleted_at__nil,omitempty" json:"deleted_at__nil,omitempty"`

	// DeletedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNilike *time.Time `form:"deleted_at__nilike,omitempty" json:"deleted_at__nilike,omitempty"`

	// DeletedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotilike *time.Time `form:"deleted_at__notilike,omitempty" json:"deleted_at__notilike,omitempty"`

	// TimestampEq SQL = operator
	TimestampEq *time.Time `form:"timestamp__eq,omitempty" json:"timestamp__eq,omitempty"`

	// TimestampNe SQL != operator
	TimestampNe *time.Time `form:"timestamp__ne,omitempty" json:"timestamp__ne,omitempty"`

	// TimestampGt SQL > operator, may not work with all column types
	TimestampGt *time.Time `form:"timestamp__gt,omitempty" json:"timestamp__gt,omitempty"`

	// TimestampGte SQL >= operator, may not work with all column types
	TimestampGte *time.Time `form:"timestamp__gte,omitempty" json:"timestamp__gte,omitempty"`

	// TimestampLt SQL < operator, may not work with all column types
	TimestampLt *time.Time `form:"timestamp__lt,omitempty" json:"timestamp__lt,omitempty"`

	// TimestampLte SQL <= operator, may not work with all column types
	TimestampLte *time.Time `form:"timestamp__lte,omitempty" json:"timestamp__lte,omitempty"`

	// TimestampIn SQL IN operator, permits comma-separated values
	TimestampIn *time.Time `form:"timestamp__in,omitempty" json:"timestamp__in,omitempty"`

	// TimestampNin SQL NOT IN operator, permits comma-separated values
	TimestampNin *time.Time `form:"timestamp__nin,omitempty" json:"timestamp__nin,omitempty"`

	// TimestampNotin SQL NOT IN operator, permits comma-separated values
	TimestampNotin *time.Time `form:"timestamp__notin,omitempty" json:"timestamp__notin,omitempty"`

	// TimestampIsnull SQL IS NULL operator, value is ignored
	TimestampIsnull *time.Time `form:"timestamp__isnull,omitempty" json:"timestamp__isnull,omitempty"`

	// TimestampNisnull SQL IS NOT NULL operator, value is ignored
	TimestampNisnull *time.Time `form:"timestamp__nisnull,omitempty" json:"timestamp__nisnull,omitempty"`

	// TimestampIsnotnull SQL IS NOT NULL operator, value is ignored
	TimestampIsnotnull *time.Time `form:"timestamp__isnotnull,omitempty" json:"timestamp__isnotnull,omitempty"`

	// TimestampL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	TimestampL *time.Time `form:"timestamp__l,omitempty" json:"timestamp__l,omitempty"`

	// TimestampLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	TimestampLike *time.Time `form:"timestamp__like,omitempty" json:"timestamp__like,omitempty"`

	// TimestampNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TimestampNl *time.Time `form:"timestamp__nl,omitempty" json:"timestamp__nl,omitempty"`

	// TimestampNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TimestampNlike *time.Time `form:"timestamp__nlike,omitempty" json:"timestamp__nlike,omitempty"`

	// TimestampNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TimestampNotlike *time.Time `form:"timestamp__notlike,omitempty" json:"timestamp__notlike,omitempty"`

	// TimestampIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	TimestampIl *time.Time `form:"timestamp__il,omitempty" json:"timestamp__il,omitempty"`

	// TimestampIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	TimestampIlike *time.Time `form:"timestamp__ilike,omitempty" json:"timestamp__ilike,omitempty"`

	// TimestampNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TimestampNil *time.Time `form:"timestamp__nil,omitempty" json:"timestamp__nil,omitempty"`

	// TimestampNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TimestampNilike *time.Time `form:"timestamp__nilike,omitempty" json:"timestamp__nilike,omitempty"`

	// TimestampNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TimestampNotilike *time.Time `form:"timestamp__notilike,omitempty" json:"timestamp__notilike,omitempty"`

	// ParentPhysicalThingIdEq SQL = operator
	ParentPhysicalThingIdEq *openapi_types.UUID `form:"parent_physical_thing_id__eq,omitempty" json:"parent_physical_thing_id__eq,omitempty"`

	// ParentPhysicalThingIdNe SQL != operator
	ParentPhysicalThingIdNe *openapi_types.UUID `form:"parent_physical_thing_id__ne,omitempty" json:"parent_physical_thing_id__ne,omitempty"`

	// ParentPhysicalThingIdGt SQL > operator, may not work with all column types
	ParentPhysicalThingIdGt *openapi_types.UUID `form:"parent_physical_thing_id__gt,omitempty" json:"parent_physical_thing_id__gt,omitempty"`

	// ParentPhysicalThingIdGte SQL >= operator, may not work with all column types
	ParentPhysicalThingIdGte *openapi_types.UUID `form:"parent_physical_thing_id__gte,omitempty" json:"parent_physical_thing_id__gte,omitempty"`

	// ParentPhysicalThingIdLt SQL < operator, may not work with all column types
	ParentPhysicalThingIdLt *openapi_types.UUID `form:"parent_physical_thing_id__lt,omitempty" json:"parent_physical_thing_id__lt,omitempty"`

	// ParentPhysicalThingIdLte SQL <= operator, may not work with all column types
	ParentPhysicalThingIdLte *openapi_types.UUID `form:"parent_physical_thing_id__lte,omitempty" json:"parent_physical_thing_id__lte,omitempty"`

	// ParentPhysicalThingIdIn SQL IN operator, permits comma-separated values
	ParentPhysicalThingIdIn *openapi_types.UUID `form:"parent_physical_thing_id__in,omitempty" json:"parent_physical_thing_id__in,omitempty"`

	// ParentPhysicalThingIdNin SQL NOT IN operator, permits comma-separated values
	ParentPhysicalThingIdNin *openapi_types.UUID `form:"parent_physical_thing_id__nin,omitempty" json:"parent_physical_thing_id__nin,omitempty"`

	// ParentPhysicalThingIdNotin SQL NOT IN operator, permits comma-separated values
	ParentPhysicalThingIdNotin *openapi_types.UUID `form:"parent_physical_thing_id__notin,omitempty" json:"parent_physical_thing_id__notin,omitempty"`

	// ParentPhysicalThingIdIsnull SQL IS NULL operator, value is ignored
	ParentPhysicalThingIdIsnull *openapi_types.UUID `form:"parent_physical_thing_id__isnull,omitempty" json:"parent_physical_thing_id__isnull,omitempty"`

	// ParentPhysicalThingIdNisnull SQL IS NOT NULL operator, value is ignored
	ParentPhysicalThingIdNisnull *openapi_types.UUID `form:"parent_physical_thing_id__nisnull,omitempty" json:"parent_physical_thing_id__nisnull,omitempty"`

	// ParentPhysicalThingIdIsnotnull SQL IS NOT NULL operator, value is ignored
	ParentPhysicalThingIdIsnotnull *openapi_types.UUID `form:"parent_physical_thing_id__isnotnull,omitempty" json:"parent_physical_thing_id__isnotnull,omitempty"`

	// ParentPhysicalThingIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdL *openapi_types.UUID `form:"parent_physical_thing_id__l,omitempty" json:"parent_physical_thing_id__l,omitempty"`

	// ParentPhysicalThingIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdLike *openapi_types.UUID `form:"parent_physical_thing_id__like,omitempty" json:"parent_physical_thing_id__like,omitempty"`

	// ParentPhysicalThingIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNl *openapi_types.UUID `form:"parent_physical_thing_id__nl,omitempty" json:"parent_physical_thing_id__nl,omitempty"`

	// ParentPhysicalThingIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNlike *openapi_types.UUID `form:"parent_physical_thing_id__nlike,omitempty" json:"parent_physical_thing_id__nlike,omitempty"`

	// ParentPhysicalThingIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNotlike *openapi_types.UUID `form:"parent_physical_thing_id__notlike,omitempty" json:"parent_physical_thing_id__notlike,omitempty"`

	// ParentPhysicalThingIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdIl *openapi_types.UUID `form:"parent_physical_thing_id__il,omitempty" json:"parent_physical_thing_id__il,omitempty"`

	// ParentPhysicalThingIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdIlike *openapi_types.UUID `form:"parent_physical_thing_id__ilike,omitempty" json:"parent_physical_thing_id__ilike,omitempty"`

	// ParentPhysicalThingIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNil *openapi_types.UUID `form:"parent_physical_thing_id__nil,omitempty" json:"parent_physical_thing_id__nil,omitempty"`

	// ParentPhysicalThingIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNilike *openapi_types.UUID `form:"parent_physical_thing_id__nilike,omitempty" json:"parent_physical_thing_id__nilike,omitempty"`

	// ParentPhysicalThingIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNotilike *openapi_types.UUID `form:"parent_physical_thing_id__notilike,omitempty" json:"parent_physical_thing_id__notilike,omitempty"`
}

// PostLocationHistoriesJSONBody defines parameters for PostLocationHistories.
type PostLocationHistoriesJSONBody = []LocationHistory

// GetLogicalThingsParams defines parameters for GetLogicalThings.
type GetLogicalThingsParams struct {
	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// CreatedAtEq SQL = operator
	CreatedAtEq *time.Time `form:"created_at__eq,omitempty" json:"created_at__eq,omitempty"`

	// CreatedAtNe SQL != operator
	CreatedAtNe *time.Time `form:"created_at__ne,omitempty" json:"created_at__ne,omitempty"`

	// CreatedAtGt SQL > operator, may not work with all column types
	CreatedAtGt *time.Time `form:"created_at__gt,omitempty" json:"created_at__gt,omitempty"`

	// CreatedAtGte SQL >= operator, may not work with all column types
	CreatedAtGte *time.Time `form:"created_at__gte,omitempty" json:"created_at__gte,omitempty"`

	// CreatedAtLt SQL < operator, may not work with all column types
	CreatedAtLt *time.Time `form:"created_at__lt,omitempty" json:"created_at__lt,omitempty"`

	// CreatedAtLte SQL <= operator, may not work with all column types
	CreatedAtLte *time.Time `form:"created_at__lte,omitempty" json:"created_at__lte,omitempty"`

	// CreatedAtIn SQL IN operator, permits comma-separated values
	CreatedAtIn *time.Time `form:"created_at__in,omitempty" json:"created_at__in,omitempty"`

	// CreatedAtNin SQL NOT IN operator, permits comma-separated values
	CreatedAtNin *time.Time `form:"created_at__nin,omitempty" json:"created_at__nin,omitempty"`

	// CreatedAtNotin SQL NOT IN operator, permits comma-separated values
	CreatedAtNotin *time.Time `form:"created_at__notin,omitempty" json:"created_at__notin,omitempty"`

	// CreatedAtIsnull SQL IS NULL operator, value is ignored
	CreatedAtIsnull *time.Time `form:"created_at__isnull,omitempty" json:"created_at__isnull,omitempty"`

	// CreatedAtNisnull SQL IS NOT NULL operator, value is ignored
	CreatedAtNisnull *time.Time `form:"created_at__nisnull,omitempty" json:"created_at__nisnull,omitempty"`

	// CreatedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	CreatedAtIsnotnull *time.Time `form:"created_at__isnotnull,omitempty" json:"created_at__isnotnull,omitempty"`

	// CreatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtL *time.Time `form:"created_at__l,omitempty" json:"created_at__l,omitempty"`

	// CreatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtLike *time.Time `form:"created_at__like,omitempty" json:"created_at__like,omitempty"`

	// CreatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNl *time.Time `form:"created_at__nl,omitempty" json:"created_at__nl,omitempty"`

	// CreatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNlike *time.Time `form:"created_at__nlike,omitempty" json:"created_at__nlike,omitempty"`

	// CreatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotlike *time.Time `form:"created_at__notlike,omitempty" json:"created_at__notlike,omitempty"`

	// CreatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIl *time.Time `form:"created_at__il,omitempty" json:"created_at__il,omitempty"`

	// CreatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIlike *time.Time `form:"created_at__ilike,omitempty" json:"created_at__ilike,omitempty"`

	// CreatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNil *time.Time `form:"created_at__nil,omitempty" json:"created_at__nil,omitempty"`

	// CreatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNilike *time.Time `form:"created_at__nilike,omitempty" json:"created_at__nilike,omitempty"`

	// CreatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotilike *time.Time `form:"created_at__notilike,omitempty" json:"created_at__notilike,omitempty"`

	// UpdatedAtEq SQL = operator
	UpdatedAtEq *time.Time `form:"updated_at__eq,omitempty" json:"updated_at__eq,omitempty"`

	// UpdatedAtNe SQL != operator
	UpdatedAtNe *time.Time `form:"updated_at__ne,omitempty" json:"updated_at__ne,omitempty"`

	// UpdatedAtGt SQL > operator, may not work with all column types
	UpdatedAtGt *time.Time `form:"updated_at__gt,omitempty" json:"updated_at__gt,omitempty"`

	// UpdatedAtGte SQL >= operator, may not work with all column types
	UpdatedAtGte *time.Time `form:"updated_at__gte,omitempty" json:"updated_at__gte,omitempty"`

	// UpdatedAtLt SQL < operator, may not work with all column types
	UpdatedAtLt *time.Time `form:"updated_at__lt,omitempty" json:"updated_at__lt,omitempty"`

	// UpdatedAtLte SQL <= operator, may not work with all column types
	UpdatedAtLte *time.Time `form:"updated_at__lte,omitempty" json:"updated_at__lte,omitempty"`

	// UpdatedAtIn SQL IN operator, permits comma-separated values
	UpdatedAtIn *time.Time `form:"updated_at__in,omitempty" json:"updated_at__in,omitempty"`

	// UpdatedAtNin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNin *time.Time `form:"updated_at__nin,omitempty" json:"updated_at__nin,omitempty"`

	// UpdatedAtNotin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNotin *time.Time `form:"updated_at__notin,omitempty" json:"updated_at__notin,omitempty"`

	// UpdatedAtIsnull SQL IS NULL operator, value is ignored
	UpdatedAtIsnull *time.Time `form:"updated_at__isnull,omitempty" json:"updated_at__isnull,omitempty"`

	// UpdatedAtNisnull SQL IS NOT NULL operator, value is ignored
	UpdatedAtNisnull *time.Time `form:"updated_at__nisnull,omitempty" json:"updated_at__nisnull,omitempty"`

	// UpdatedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	UpdatedAtIsnotnull *time.Time `form:"updated_at__isnotnull,omitempty" json:"updated_at__isnotnull,omitempty"`

	// UpdatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtL *time.Time `form:"updated_at__l,omitempty" json:"updated_at__l,omitempty"`

	// UpdatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtLike *time.Time `form:"updated_at__like,omitempty" json:"updated_at__like,omitempty"`

	// UpdatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNl *time.Time `form:"updated_at__nl,omitempty" json:"updated_at__nl,omitempty"`

	// UpdatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNlike *time.Time `form:"updated_at__nlike,omitempty" json:"updated_at__nlike,omitempty"`

	// UpdatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotlike *time.Time `form:"updated_at__notlike,omitempty" json:"updated_at__notlike,omitempty"`

	// UpdatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIl *time.Time `form:"updated_at__il,omitempty" json:"updated_at__il,omitempty"`

	// UpdatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIlike *time.Time `form:"updated_at__ilike,omitempty" json:"updated_at__ilike,omitempty"`

	// UpdatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNil *time.Time `form:"updated_at__nil,omitempty" json:"updated_at__nil,omitempty"`

	// UpdatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNilike *time.Time `form:"updated_at__nilike,omitempty" json:"updated_at__nilike,omitempty"`

	// UpdatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotilike *time.Time `form:"updated_at__notilike,omitempty" json:"updated_at__notilike,omitempty"`

	// DeletedAtEq SQL = operator
	DeletedAtEq *time.Time `form:"deleted_at__eq,omitempty" json:"deleted_at__eq,omitempty"`

	// DeletedAtNe SQL != operator
	DeletedAtNe *time.Time `form:"deleted_at__ne,omitempty" json:"deleted_at__ne,omitempty"`

	// DeletedAtGt SQL > operator, may not work with all column types
	DeletedAtGt *time.Time `form:"deleted_at__gt,omitempty" json:"deleted_at__gt,omitempty"`

	// DeletedAtGte SQL >= operator, may not work with all column types
	DeletedAtGte *time.Time `form:"deleted_at__gte,omitempty" json:"deleted_at__gte,omitempty"`

	// DeletedAtLt SQL < operator, may not work with all column types
	DeletedAtLt *time.Time `form:"deleted_at__lt,omitempty" json:"deleted_at__lt,omitempty"`

	// DeletedAtLte SQL <= operator, may not work with all column types
	DeletedAtLte *time.Time `form:"deleted_at__lte,omitempty" json:"deleted_at__lte,omitempty"`

	// DeletedAtIn SQL IN operator, permits comma-separated values
	DeletedAtIn *time.Time `form:"deleted_at__in,omitempty" json:"deleted_at__in,omitempty"`

	// DeletedAtNin SQL NOT IN operator, permits comma-separated values
	DeletedAtNin *time.Time `form:"deleted_at__nin,omitempty" json:"deleted_at__nin,omitempty"`

	// DeletedAtNotin SQL NOT IN operator, permits comma-separated values
	DeletedAtNotin *time.Time `form:"deleted_at__notin,omitempty" json:"deleted_at__notin,omitempty"`

	// DeletedAtIsnull SQL IS NULL operator, value is ignored
	DeletedAtIsnull *time.Time `form:"deleted_at__isnull,omitempty" json:"deleted_at__isnull,omitempty"`

	// DeletedAtNisnull SQL IS NOT NULL operator, value is ignored
	DeletedAtNisnull *time.Time `form:"deleted_at__nisnull,omitempty" json:"deleted_at__nisnull,omitempty"`

	// DeletedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	DeletedAtIsnotnull *time.Time `form:"deleted_at__isnotnull,omitempty" json:"deleted_at__isnotnull,omitempty"`

	// DeletedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtL *time.Time `form:"deleted_at__l,omitempty" json:"deleted_at__l,omitempty"`

	// DeletedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtLike *time.Time `form:"deleted_at__like,omitempty" json:"deleted_at__like,omitempty"`

	// DeletedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNl *time.Time `form:"deleted_at__nl,omitempty" json:"deleted_at__nl,omitempty"`

	// DeletedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNlike *time.Time `form:"deleted_at__nlike,omitempty" json:"deleted_at__nlike,omitempty"`

	// DeletedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotlike *time.Time `form:"deleted_at__notlike,omitempty" json:"deleted_at__notlike,omitempty"`

	// DeletedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIl *time.Time `form:"deleted_at__il,omitempty" json:"deleted_at__il,omitempty"`

	// DeletedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIlike *time.Time `form:"deleted_at__ilike,omitempty" json:"deleted_at__ilike,omitempty"`

	// DeletedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNil *time.Time `form:"deleted_at__nil,omitempty" json:"deleted_at__nil,omitempty"`

	// DeletedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNilike *time.Time `form:"deleted_at__nilike,omitempty" json:"deleted_at__nilike,omitempty"`

	// DeletedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotilike *time.Time `form:"deleted_at__notilike,omitempty" json:"deleted_at__notilike,omitempty"`

	// ExternalIdEq SQL = operator
	ExternalIdEq *string `form:"external_id__eq,omitempty" json:"external_id__eq,omitempty"`

	// ExternalIdNe SQL != operator
	ExternalIdNe *string `form:"external_id__ne,omitempty" json:"external_id__ne,omitempty"`

	// ExternalIdGt SQL > operator, may not work with all column types
	ExternalIdGt *string `form:"external_id__gt,omitempty" json:"external_id__gt,omitempty"`

	// ExternalIdGte SQL >= operator, may not work with all column types
	ExternalIdGte *string `form:"external_id__gte,omitempty" json:"external_id__gte,omitempty"`

	// ExternalIdLt SQL < operator, may not work with all column types
	ExternalIdLt *string `form:"external_id__lt,omitempty" json:"external_id__lt,omitempty"`

	// ExternalIdLte SQL <= operator, may not work with all column types
	ExternalIdLte *string `form:"external_id__lte,omitempty" json:"external_id__lte,omitempty"`

	// ExternalIdIn SQL IN operator, permits comma-separated values
	ExternalIdIn *string `form:"external_id__in,omitempty" json:"external_id__in,omitempty"`

	// ExternalIdNin SQL NOT IN operator, permits comma-separated values
	ExternalIdNin *string `form:"external_id__nin,omitempty" json:"external_id__nin,omitempty"`

	// ExternalIdNotin SQL NOT IN operator, permits comma-separated values
	ExternalIdNotin *string `form:"external_id__notin,omitempty" json:"external_id__notin,omitempty"`

	// ExternalIdIsnull SQL IS NULL operator, value is ignored
	ExternalIdIsnull *string `form:"external_id__isnull,omitempty" json:"external_id__isnull,omitempty"`

	// ExternalIdNisnull SQL IS NOT NULL operator, value is ignored
	ExternalIdNisnull *string `form:"external_id__nisnull,omitempty" json:"external_id__nisnull,omitempty"`

	// ExternalIdIsnotnull SQL IS NOT NULL operator, value is ignored
	ExternalIdIsnotnull *string `form:"external_id__isnotnull,omitempty" json:"external_id__isnotnull,omitempty"`

	// ExternalIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdL *string `form:"external_id__l,omitempty" json:"external_id__l,omitempty"`

	// ExternalIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdLike *string `form:"external_id__like,omitempty" json:"external_id__like,omitempty"`

	// ExternalIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNl *string `form:"external_id__nl,omitempty" json:"external_id__nl,omitempty"`

	// ExternalIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNlike *string `form:"external_id__nlike,omitempty" json:"external_id__nlike,omitempty"`

	// ExternalIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNotlike *string `form:"external_id__notlike,omitempty" json:"external_id__notlike,omitempty"`

	// ExternalIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdIl *string `form:"external_id__il,omitempty" json:"external_id__il,omitempty"`

	// ExternalIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdIlike *string `form:"external_id__ilike,omitempty" json:"external_id__ilike,omitempty"`

	// ExternalIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNil *string `form:"external_id__nil,omitempty" json:"external_id__nil,omitempty"`

	// ExternalIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNilike *string `form:"external_id__nilike,omitempty" json:"external_id__nilike,omitempty"`

	// ExternalIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNotilike *string `form:"external_id__notilike,omitempty" json:"external_id__notilike,omitempty"`

	// NameEq SQL = operator
	NameEq *string `form:"name__eq,omitempty" json:"name__eq,omitempty"`

	// NameNe SQL != operator
	NameNe *string `form:"name__ne,omitempty" json:"name__ne,omitempty"`

	// NameGt SQL > operator, may not work with all column types
	NameGt *string `form:"name__gt,omitempty" json:"name__gt,omitempty"`

	// NameGte SQL >= operator, may not work with all column types
	NameGte *string `form:"name__gte,omitempty" json:"name__gte,omitempty"`

	// NameLt SQL < operator, may not work with all column types
	NameLt *string `form:"name__lt,omitempty" json:"name__lt,omitempty"`

	// NameLte SQL <= operator, may not work with all column types
	NameLte *string `form:"name__lte,omitempty" json:"name__lte,omitempty"`

	// NameIn SQL IN operator, permits comma-separated values
	NameIn *string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameNin SQL NOT IN operator, permits comma-separated values
	NameNin *string `form:"name__nin,omitempty" json:"name__nin,omitempty"`

	// NameNotin SQL NOT IN operator, permits comma-separated values
	NameNotin *string `form:"name__notin,omitempty" json:"name__notin,omitempty"`

	// NameIsnull SQL IS NULL operator, value is ignored
	NameIsnull *string `form:"name__isnull,omitempty" json:"name__isnull,omitempty"`

	// NameNisnull SQL IS NOT NULL operator, value is ignored
	NameNisnull *string `form:"name__nisnull,omitempty" json:"name__nisnull,omitempty"`

	// NameIsnotnull SQL IS NOT NULL operator, value is ignored
	NameIsnotnull *string `form:"name__isnotnull,omitempty" json:"name__isnotnull,omitempty"`

	// NameL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	NameL *string `form:"name__l,omitempty" json:"name__l,omitempty"`

	// NameLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	NameLike *string `form:"name__like,omitempty" json:"name__like,omitempty"`

	// NameNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNl *string `form:"name__nl,omitempty" json:"name__nl,omitempty"`

	// NameNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNlike *string `form:"name__nlike,omitempty" json:"name__nlike,omitempty"`

	// NameNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNotlike *string `form:"name__notlike,omitempty" json:"name__notlike,omitempty"`

	// NameIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	NameIl *string `form:"name__il,omitempty" json:"name__il,omitempty"`

	// NameIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	NameIlike *string `form:"name__ilike,omitempty" json:"name__ilike,omitempty"`

	// NameNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNil *string `form:"name__nil,omitempty" json:"name__nil,omitempty"`

	// NameNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNilike *string `form:"name__nilike,omitempty" json:"name__nilike,omitempty"`

	// NameNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNotilike *string `form:"name__notilike,omitempty" json:"name__notilike,omitempty"`

	// TypeEq SQL = operator
	TypeEq *string `form:"type__eq,omitempty" json:"type__eq,omitempty"`

	// TypeNe SQL != operator
	TypeNe *string `form:"type__ne,omitempty" json:"type__ne,omitempty"`

	// TypeGt SQL > operator, may not work with all column types
	TypeGt *string `form:"type__gt,omitempty" json:"type__gt,omitempty"`

	// TypeGte SQL >= operator, may not work with all column types
	TypeGte *string `form:"type__gte,omitempty" json:"type__gte,omitempty"`

	// TypeLt SQL < operator, may not work with all column types
	TypeLt *string `form:"type__lt,omitempty" json:"type__lt,omitempty"`

	// TypeLte SQL <= operator, may not work with all column types
	TypeLte *string `form:"type__lte,omitempty" json:"type__lte,omitempty"`

	// TypeIn SQL IN operator, permits comma-separated values
	TypeIn *string `form:"type__in,omitempty" json:"type__in,omitempty"`

	// TypeNin SQL NOT IN operator, permits comma-separated values
	TypeNin *string `form:"type__nin,omitempty" json:"type__nin,omitempty"`

	// TypeNotin SQL NOT IN operator, permits comma-separated values
	TypeNotin *string `form:"type__notin,omitempty" json:"type__notin,omitempty"`

	// TypeIsnull SQL IS NULL operator, value is ignored
	TypeIsnull *string `form:"type__isnull,omitempty" json:"type__isnull,omitempty"`

	// TypeNisnull SQL IS NOT NULL operator, value is ignored
	TypeNisnull *string `form:"type__nisnull,omitempty" json:"type__nisnull,omitempty"`

	// TypeIsnotnull SQL IS NOT NULL operator, value is ignored
	TypeIsnotnull *string `form:"type__isnotnull,omitempty" json:"type__isnotnull,omitempty"`

	// TypeL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	TypeL *string `form:"type__l,omitempty" json:"type__l,omitempty"`

	// TypeLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	TypeLike *string `form:"type__like,omitempty" json:"type__like,omitempty"`

	// TypeNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TypeNl *string `form:"type__nl,omitempty" json:"type__nl,omitempty"`

	// TypeNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TypeNlike *string `form:"type__nlike,omitempty" json:"type__nlike,omitempty"`

	// TypeNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TypeNotlike *string `form:"type__notlike,omitempty" json:"type__notlike,omitempty"`

	// TypeIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeIl *string `form:"type__il,omitempty" json:"type__il,omitempty"`

	// TypeIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeIlike *string `form:"type__ilike,omitempty" json:"type__ilike,omitempty"`

	// TypeNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeNil *string `form:"type__nil,omitempty" json:"type__nil,omitempty"`

	// TypeNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeNilike *string `form:"type__nilike,omitempty" json:"type__nilike,omitempty"`

	// TypeNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeNotilike *string `form:"type__notilike,omitempty" json:"type__notilike,omitempty"`

	// ParentPhysicalThingIdEq SQL = operator
	ParentPhysicalThingIdEq *openapi_types.UUID `form:"parent_physical_thing_id__eq,omitempty" json:"parent_physical_thing_id__eq,omitempty"`

	// ParentPhysicalThingIdNe SQL != operator
	ParentPhysicalThingIdNe *openapi_types.UUID `form:"parent_physical_thing_id__ne,omitempty" json:"parent_physical_thing_id__ne,omitempty"`

	// ParentPhysicalThingIdGt SQL > operator, may not work with all column types
	ParentPhysicalThingIdGt *openapi_types.UUID `form:"parent_physical_thing_id__gt,omitempty" json:"parent_physical_thing_id__gt,omitempty"`

	// ParentPhysicalThingIdGte SQL >= operator, may not work with all column types
	ParentPhysicalThingIdGte *openapi_types.UUID `form:"parent_physical_thing_id__gte,omitempty" json:"parent_physical_thing_id__gte,omitempty"`

	// ParentPhysicalThingIdLt SQL < operator, may not work with all column types
	ParentPhysicalThingIdLt *openapi_types.UUID `form:"parent_physical_thing_id__lt,omitempty" json:"parent_physical_thing_id__lt,omitempty"`

	// ParentPhysicalThingIdLte SQL <= operator, may not work with all column types
	ParentPhysicalThingIdLte *openapi_types.UUID `form:"parent_physical_thing_id__lte,omitempty" json:"parent_physical_thing_id__lte,omitempty"`

	// ParentPhysicalThingIdIn SQL IN operator, permits comma-separated values
	ParentPhysicalThingIdIn *openapi_types.UUID `form:"parent_physical_thing_id__in,omitempty" json:"parent_physical_thing_id__in,omitempty"`

	// ParentPhysicalThingIdNin SQL NOT IN operator, permits comma-separated values
	ParentPhysicalThingIdNin *openapi_types.UUID `form:"parent_physical_thing_id__nin,omitempty" json:"parent_physical_thing_id__nin,omitempty"`

	// ParentPhysicalThingIdNotin SQL NOT IN operator, permits comma-separated values
	ParentPhysicalThingIdNotin *openapi_types.UUID `form:"parent_physical_thing_id__notin,omitempty" json:"parent_physical_thing_id__notin,omitempty"`

	// ParentPhysicalThingIdIsnull SQL IS NULL operator, value is ignored
	ParentPhysicalThingIdIsnull *openapi_types.UUID `form:"parent_physical_thing_id__isnull,omitempty" json:"parent_physical_thing_id__isnull,omitempty"`

	// ParentPhysicalThingIdNisnull SQL IS NOT NULL operator, value is ignored
	ParentPhysicalThingIdNisnull *openapi_types.UUID `form:"parent_physical_thing_id__nisnull,omitempty" json:"parent_physical_thing_id__nisnull,omitempty"`

	// ParentPhysicalThingIdIsnotnull SQL IS NOT NULL operator, value is ignored
	ParentPhysicalThingIdIsnotnull *openapi_types.UUID `form:"parent_physical_thing_id__isnotnull,omitempty" json:"parent_physical_thing_id__isnotnull,omitempty"`

	// ParentPhysicalThingIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdL *openapi_types.UUID `form:"parent_physical_thing_id__l,omitempty" json:"parent_physical_thing_id__l,omitempty"`

	// ParentPhysicalThingIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdLike *openapi_types.UUID `form:"parent_physical_thing_id__like,omitempty" json:"parent_physical_thing_id__like,omitempty"`

	// ParentPhysicalThingIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNl *openapi_types.UUID `form:"parent_physical_thing_id__nl,omitempty" json:"parent_physical_thing_id__nl,omitempty"`

	// ParentPhysicalThingIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNlike *openapi_types.UUID `form:"parent_physical_thing_id__nlike,omitempty" json:"parent_physical_thing_id__nlike,omitempty"`

	// ParentPhysicalThingIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNotlike *openapi_types.UUID `form:"parent_physical_thing_id__notlike,omitempty" json:"parent_physical_thing_id__notlike,omitempty"`

	// ParentPhysicalThingIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdIl *openapi_types.UUID `form:"parent_physical_thing_id__il,omitempty" json:"parent_physical_thing_id__il,omitempty"`

	// ParentPhysicalThingIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdIlike *openapi_types.UUID `form:"parent_physical_thing_id__ilike,omitempty" json:"parent_physical_thing_id__ilike,omitempty"`

	// ParentPhysicalThingIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNil *openapi_types.UUID `form:"parent_physical_thing_id__nil,omitempty" json:"parent_physical_thing_id__nil,omitempty"`

	// ParentPhysicalThingIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNilike *openapi_types.UUID `form:"parent_physical_thing_id__nilike,omitempty" json:"parent_physical_thing_id__nilike,omitempty"`

	// ParentPhysicalThingIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentPhysicalThingIdNotilike *openapi_types.UUID `form:"parent_physical_thing_id__notilike,omitempty" json:"parent_physical_thing_id__notilike,omitempty"`

	// ParentLogicalThingIdEq SQL = operator
	ParentLogicalThingIdEq *openapi_types.UUID `form:"parent_logical_thing_id__eq,omitempty" json:"parent_logical_thing_id__eq,omitempty"`

	// ParentLogicalThingIdNe SQL != operator
	ParentLogicalThingIdNe *openapi_types.UUID `form:"parent_logical_thing_id__ne,omitempty" json:"parent_logical_thing_id__ne,omitempty"`

	// ParentLogicalThingIdGt SQL > operator, may not work with all column types
	ParentLogicalThingIdGt *openapi_types.UUID `form:"parent_logical_thing_id__gt,omitempty" json:"parent_logical_thing_id__gt,omitempty"`

	// ParentLogicalThingIdGte SQL >= operator, may not work with all column types
	ParentLogicalThingIdGte *openapi_types.UUID `form:"parent_logical_thing_id__gte,omitempty" json:"parent_logical_thing_id__gte,omitempty"`

	// ParentLogicalThingIdLt SQL < operator, may not work with all column types
	ParentLogicalThingIdLt *openapi_types.UUID `form:"parent_logical_thing_id__lt,omitempty" json:"parent_logical_thing_id__lt,omitempty"`

	// ParentLogicalThingIdLte SQL <= operator, may not work with all column types
	ParentLogicalThingIdLte *openapi_types.UUID `form:"parent_logical_thing_id__lte,omitempty" json:"parent_logical_thing_id__lte,omitempty"`

	// ParentLogicalThingIdIn SQL IN operator, permits comma-separated values
	ParentLogicalThingIdIn *openapi_types.UUID `form:"parent_logical_thing_id__in,omitempty" json:"parent_logical_thing_id__in,omitempty"`

	// ParentLogicalThingIdNin SQL NOT IN operator, permits comma-separated values
	ParentLogicalThingIdNin *openapi_types.UUID `form:"parent_logical_thing_id__nin,omitempty" json:"parent_logical_thing_id__nin,omitempty"`

	// ParentLogicalThingIdNotin SQL NOT IN operator, permits comma-separated values
	ParentLogicalThingIdNotin *openapi_types.UUID `form:"parent_logical_thing_id__notin,omitempty" json:"parent_logical_thing_id__notin,omitempty"`

	// ParentLogicalThingIdIsnull SQL IS NULL operator, value is ignored
	ParentLogicalThingIdIsnull *openapi_types.UUID `form:"parent_logical_thing_id__isnull,omitempty" json:"parent_logical_thing_id__isnull,omitempty"`

	// ParentLogicalThingIdNisnull SQL IS NOT NULL operator, value is ignored
	ParentLogicalThingIdNisnull *openapi_types.UUID `form:"parent_logical_thing_id__nisnull,omitempty" json:"parent_logical_thing_id__nisnull,omitempty"`

	// ParentLogicalThingIdIsnotnull SQL IS NOT NULL operator, value is ignored
	ParentLogicalThingIdIsnotnull *openapi_types.UUID `form:"parent_logical_thing_id__isnotnull,omitempty" json:"parent_logical_thing_id__isnotnull,omitempty"`

	// ParentLogicalThingIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdL *openapi_types.UUID `form:"parent_logical_thing_id__l,omitempty" json:"parent_logical_thing_id__l,omitempty"`

	// ParentLogicalThingIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdLike *openapi_types.UUID `form:"parent_logical_thing_id__like,omitempty" json:"parent_logical_thing_id__like,omitempty"`

	// ParentLogicalThingIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdNl *openapi_types.UUID `form:"parent_logical_thing_id__nl,omitempty" json:"parent_logical_thing_id__nl,omitempty"`

	// ParentLogicalThingIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdNlike *openapi_types.UUID `form:"parent_logical_thing_id__nlike,omitempty" json:"parent_logical_thing_id__nlike,omitempty"`

	// ParentLogicalThingIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdNotlike *openapi_types.UUID `form:"parent_logical_thing_id__notlike,omitempty" json:"parent_logical_thing_id__notlike,omitempty"`

	// ParentLogicalThingIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdIl *openapi_types.UUID `form:"parent_logical_thing_id__il,omitempty" json:"parent_logical_thing_id__il,omitempty"`

	// ParentLogicalThingIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdIlike *openapi_types.UUID `form:"parent_logical_thing_id__ilike,omitempty" json:"parent_logical_thing_id__ilike,omitempty"`

	// ParentLogicalThingIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdNil *openapi_types.UUID `form:"parent_logical_thing_id__nil,omitempty" json:"parent_logical_thing_id__nil,omitempty"`

	// ParentLogicalThingIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdNilike *openapi_types.UUID `form:"parent_logical_thing_id__nilike,omitempty" json:"parent_logical_thing_id__nilike,omitempty"`

	// ParentLogicalThingIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ParentLogicalThingIdNotilike *openapi_types.UUID `form:"parent_logical_thing_id__notilike,omitempty" json:"parent_logical_thing_id__notilike,omitempty"`
}

// PostLogicalThingsJSONBody defines parameters for PostLogicalThings.
type PostLogicalThingsJSONBody = []LogicalThing

// GetPhysicalThingsParams defines parameters for GetPhysicalThings.
type GetPhysicalThingsParams struct {
	// IdEq SQL = operator
	IdEq *openapi_types.UUID `form:"id__eq,omitempty" json:"id__eq,omitempty"`

	// IdNe SQL != operator
	IdNe *openapi_types.UUID `form:"id__ne,omitempty" json:"id__ne,omitempty"`

	// IdGt SQL > operator, may not work with all column types
	IdGt *openapi_types.UUID `form:"id__gt,omitempty" json:"id__gt,omitempty"`

	// IdGte SQL >= operator, may not work with all column types
	IdGte *openapi_types.UUID `form:"id__gte,omitempty" json:"id__gte,omitempty"`

	// IdLt SQL < operator, may not work with all column types
	IdLt *openapi_types.UUID `form:"id__lt,omitempty" json:"id__lt,omitempty"`

	// IdLte SQL <= operator, may not work with all column types
	IdLte *openapi_types.UUID `form:"id__lte,omitempty" json:"id__lte,omitempty"`

	// IdIn SQL IN operator, permits comma-separated values
	IdIn *openapi_types.UUID `form:"id__in,omitempty" json:"id__in,omitempty"`

	// IdNin SQL NOT IN operator, permits comma-separated values
	IdNin *openapi_types.UUID `form:"id__nin,omitempty" json:"id__nin,omitempty"`

	// IdNotin SQL NOT IN operator, permits comma-separated values
	IdNotin *openapi_types.UUID `form:"id__notin,omitempty" json:"id__notin,omitempty"`

	// IdIsnull SQL IS NULL operator, value is ignored
	IdIsnull *openapi_types.UUID `form:"id__isnull,omitempty" json:"id__isnull,omitempty"`

	// IdNisnull SQL IS NOT NULL operator, value is ignored
	IdNisnull *openapi_types.UUID `form:"id__nisnull,omitempty" json:"id__nisnull,omitempty"`

	// IdIsnotnull SQL IS NOT NULL operator, value is ignored
	IdIsnotnull *openapi_types.UUID `form:"id__isnotnull,omitempty" json:"id__isnotnull,omitempty"`

	// IdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdL *openapi_types.UUID `form:"id__l,omitempty" json:"id__l,omitempty"`

	// IdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	IdLike *openapi_types.UUID `form:"id__like,omitempty" json:"id__like,omitempty"`

	// IdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNl *openapi_types.UUID `form:"id__nl,omitempty" json:"id__nl,omitempty"`

	// IdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNlike *openapi_types.UUID `form:"id__nlike,omitempty" json:"id__nlike,omitempty"`

	// IdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	IdNotlike *openapi_types.UUID `form:"id__notlike,omitempty" json:"id__notlike,omitempty"`

	// IdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIl *openapi_types.UUID `form:"id__il,omitempty" json:"id__il,omitempty"`

	// IdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	IdIlike *openapi_types.UUID `form:"id__ilike,omitempty" json:"id__ilike,omitempty"`

	// IdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNil *openapi_types.UUID `form:"id__nil,omitempty" json:"id__nil,omitempty"`

	// IdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNilike *openapi_types.UUID `form:"id__nilike,omitempty" json:"id__nilike,omitempty"`

	// IdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	IdNotilike *openapi_types.UUID `form:"id__notilike,omitempty" json:"id__notilike,omitempty"`

	// CreatedAtEq SQL = operator
	CreatedAtEq *time.Time `form:"created_at__eq,omitempty" json:"created_at__eq,omitempty"`

	// CreatedAtNe SQL != operator
	CreatedAtNe *time.Time `form:"created_at__ne,omitempty" json:"created_at__ne,omitempty"`

	// CreatedAtGt SQL > operator, may not work with all column types
	CreatedAtGt *time.Time `form:"created_at__gt,omitempty" json:"created_at__gt,omitempty"`

	// CreatedAtGte SQL >= operator, may not work with all column types
	CreatedAtGte *time.Time `form:"created_at__gte,omitempty" json:"created_at__gte,omitempty"`

	// CreatedAtLt SQL < operator, may not work with all column types
	CreatedAtLt *time.Time `form:"created_at__lt,omitempty" json:"created_at__lt,omitempty"`

	// CreatedAtLte SQL <= operator, may not work with all column types
	CreatedAtLte *time.Time `form:"created_at__lte,omitempty" json:"created_at__lte,omitempty"`

	// CreatedAtIn SQL IN operator, permits comma-separated values
	CreatedAtIn *time.Time `form:"created_at__in,omitempty" json:"created_at__in,omitempty"`

	// CreatedAtNin SQL NOT IN operator, permits comma-separated values
	CreatedAtNin *time.Time `form:"created_at__nin,omitempty" json:"created_at__nin,omitempty"`

	// CreatedAtNotin SQL NOT IN operator, permits comma-separated values
	CreatedAtNotin *time.Time `form:"created_at__notin,omitempty" json:"created_at__notin,omitempty"`

	// CreatedAtIsnull SQL IS NULL operator, value is ignored
	CreatedAtIsnull *time.Time `form:"created_at__isnull,omitempty" json:"created_at__isnull,omitempty"`

	// CreatedAtNisnull SQL IS NOT NULL operator, value is ignored
	CreatedAtNisnull *time.Time `form:"created_at__nisnull,omitempty" json:"created_at__nisnull,omitempty"`

	// CreatedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	CreatedAtIsnotnull *time.Time `form:"created_at__isnotnull,omitempty" json:"created_at__isnotnull,omitempty"`

	// CreatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtL *time.Time `form:"created_at__l,omitempty" json:"created_at__l,omitempty"`

	// CreatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtLike *time.Time `form:"created_at__like,omitempty" json:"created_at__like,omitempty"`

	// CreatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNl *time.Time `form:"created_at__nl,omitempty" json:"created_at__nl,omitempty"`

	// CreatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNlike *time.Time `form:"created_at__nlike,omitempty" json:"created_at__nlike,omitempty"`

	// CreatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotlike *time.Time `form:"created_at__notlike,omitempty" json:"created_at__notlike,omitempty"`

	// CreatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIl *time.Time `form:"created_at__il,omitempty" json:"created_at__il,omitempty"`

	// CreatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtIlike *time.Time `form:"created_at__ilike,omitempty" json:"created_at__ilike,omitempty"`

	// CreatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNil *time.Time `form:"created_at__nil,omitempty" json:"created_at__nil,omitempty"`

	// CreatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNilike *time.Time `form:"created_at__nilike,omitempty" json:"created_at__nilike,omitempty"`

	// CreatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	CreatedAtNotilike *time.Time `form:"created_at__notilike,omitempty" json:"created_at__notilike,omitempty"`

	// UpdatedAtEq SQL = operator
	UpdatedAtEq *time.Time `form:"updated_at__eq,omitempty" json:"updated_at__eq,omitempty"`

	// UpdatedAtNe SQL != operator
	UpdatedAtNe *time.Time `form:"updated_at__ne,omitempty" json:"updated_at__ne,omitempty"`

	// UpdatedAtGt SQL > operator, may not work with all column types
	UpdatedAtGt *time.Time `form:"updated_at__gt,omitempty" json:"updated_at__gt,omitempty"`

	// UpdatedAtGte SQL >= operator, may not work with all column types
	UpdatedAtGte *time.Time `form:"updated_at__gte,omitempty" json:"updated_at__gte,omitempty"`

	// UpdatedAtLt SQL < operator, may not work with all column types
	UpdatedAtLt *time.Time `form:"updated_at__lt,omitempty" json:"updated_at__lt,omitempty"`

	// UpdatedAtLte SQL <= operator, may not work with all column types
	UpdatedAtLte *time.Time `form:"updated_at__lte,omitempty" json:"updated_at__lte,omitempty"`

	// UpdatedAtIn SQL IN operator, permits comma-separated values
	UpdatedAtIn *time.Time `form:"updated_at__in,omitempty" json:"updated_at__in,omitempty"`

	// UpdatedAtNin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNin *time.Time `form:"updated_at__nin,omitempty" json:"updated_at__nin,omitempty"`

	// UpdatedAtNotin SQL NOT IN operator, permits comma-separated values
	UpdatedAtNotin *time.Time `form:"updated_at__notin,omitempty" json:"updated_at__notin,omitempty"`

	// UpdatedAtIsnull SQL IS NULL operator, value is ignored
	UpdatedAtIsnull *time.Time `form:"updated_at__isnull,omitempty" json:"updated_at__isnull,omitempty"`

	// UpdatedAtNisnull SQL IS NOT NULL operator, value is ignored
	UpdatedAtNisnull *time.Time `form:"updated_at__nisnull,omitempty" json:"updated_at__nisnull,omitempty"`

	// UpdatedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	UpdatedAtIsnotnull *time.Time `form:"updated_at__isnotnull,omitempty" json:"updated_at__isnotnull,omitempty"`

	// UpdatedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtL *time.Time `form:"updated_at__l,omitempty" json:"updated_at__l,omitempty"`

	// UpdatedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtLike *time.Time `form:"updated_at__like,omitempty" json:"updated_at__like,omitempty"`

	// UpdatedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNl *time.Time `form:"updated_at__nl,omitempty" json:"updated_at__nl,omitempty"`

	// UpdatedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNlike *time.Time `form:"updated_at__nlike,omitempty" json:"updated_at__nlike,omitempty"`

	// UpdatedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotlike *time.Time `form:"updated_at__notlike,omitempty" json:"updated_at__notlike,omitempty"`

	// UpdatedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIl *time.Time `form:"updated_at__il,omitempty" json:"updated_at__il,omitempty"`

	// UpdatedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtIlike *time.Time `form:"updated_at__ilike,omitempty" json:"updated_at__ilike,omitempty"`

	// UpdatedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNil *time.Time `form:"updated_at__nil,omitempty" json:"updated_at__nil,omitempty"`

	// UpdatedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNilike *time.Time `form:"updated_at__nilike,omitempty" json:"updated_at__nilike,omitempty"`

	// UpdatedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	UpdatedAtNotilike *time.Time `form:"updated_at__notilike,omitempty" json:"updated_at__notilike,omitempty"`

	// DeletedAtEq SQL = operator
	DeletedAtEq *time.Time `form:"deleted_at__eq,omitempty" json:"deleted_at__eq,omitempty"`

	// DeletedAtNe SQL != operator
	DeletedAtNe *time.Time `form:"deleted_at__ne,omitempty" json:"deleted_at__ne,omitempty"`

	// DeletedAtGt SQL > operator, may not work with all column types
	DeletedAtGt *time.Time `form:"deleted_at__gt,omitempty" json:"deleted_at__gt,omitempty"`

	// DeletedAtGte SQL >= operator, may not work with all column types
	DeletedAtGte *time.Time `form:"deleted_at__gte,omitempty" json:"deleted_at__gte,omitempty"`

	// DeletedAtLt SQL < operator, may not work with all column types
	DeletedAtLt *time.Time `form:"deleted_at__lt,omitempty" json:"deleted_at__lt,omitempty"`

	// DeletedAtLte SQL <= operator, may not work with all column types
	DeletedAtLte *time.Time `form:"deleted_at__lte,omitempty" json:"deleted_at__lte,omitempty"`

	// DeletedAtIn SQL IN operator, permits comma-separated values
	DeletedAtIn *time.Time `form:"deleted_at__in,omitempty" json:"deleted_at__in,omitempty"`

	// DeletedAtNin SQL NOT IN operator, permits comma-separated values
	DeletedAtNin *time.Time `form:"deleted_at__nin,omitempty" json:"deleted_at__nin,omitempty"`

	// DeletedAtNotin SQL NOT IN operator, permits comma-separated values
	DeletedAtNotin *time.Time `form:"deleted_at__notin,omitempty" json:"deleted_at__notin,omitempty"`

	// DeletedAtIsnull SQL IS NULL operator, value is ignored
	DeletedAtIsnull *time.Time `form:"deleted_at__isnull,omitempty" json:"deleted_at__isnull,omitempty"`

	// DeletedAtNisnull SQL IS NOT NULL operator, value is ignored
	DeletedAtNisnull *time.Time `form:"deleted_at__nisnull,omitempty" json:"deleted_at__nisnull,omitempty"`

	// DeletedAtIsnotnull SQL IS NOT NULL operator, value is ignored
	DeletedAtIsnotnull *time.Time `form:"deleted_at__isnotnull,omitempty" json:"deleted_at__isnotnull,omitempty"`

	// DeletedAtL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtL *time.Time `form:"deleted_at__l,omitempty" json:"deleted_at__l,omitempty"`

	// DeletedAtLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtLike *time.Time `form:"deleted_at__like,omitempty" json:"deleted_at__like,omitempty"`

	// DeletedAtNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNl *time.Time `form:"deleted_at__nl,omitempty" json:"deleted_at__nl,omitempty"`

	// DeletedAtNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNlike *time.Time `form:"deleted_at__nlike,omitempty" json:"deleted_at__nlike,omitempty"`

	// DeletedAtNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotlike *time.Time `form:"deleted_at__notlike,omitempty" json:"deleted_at__notlike,omitempty"`

	// DeletedAtIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIl *time.Time `form:"deleted_at__il,omitempty" json:"deleted_at__il,omitempty"`

	// DeletedAtIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtIlike *time.Time `form:"deleted_at__ilike,omitempty" json:"deleted_at__ilike,omitempty"`

	// DeletedAtNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNil *time.Time `form:"deleted_at__nil,omitempty" json:"deleted_at__nil,omitempty"`

	// DeletedAtNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNilike *time.Time `form:"deleted_at__nilike,omitempty" json:"deleted_at__nilike,omitempty"`

	// DeletedAtNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	DeletedAtNotilike *time.Time `form:"deleted_at__notilike,omitempty" json:"deleted_at__notilike,omitempty"`

	// ExternalIdEq SQL = operator
	ExternalIdEq *string `form:"external_id__eq,omitempty" json:"external_id__eq,omitempty"`

	// ExternalIdNe SQL != operator
	ExternalIdNe *string `form:"external_id__ne,omitempty" json:"external_id__ne,omitempty"`

	// ExternalIdGt SQL > operator, may not work with all column types
	ExternalIdGt *string `form:"external_id__gt,omitempty" json:"external_id__gt,omitempty"`

	// ExternalIdGte SQL >= operator, may not work with all column types
	ExternalIdGte *string `form:"external_id__gte,omitempty" json:"external_id__gte,omitempty"`

	// ExternalIdLt SQL < operator, may not work with all column types
	ExternalIdLt *string `form:"external_id__lt,omitempty" json:"external_id__lt,omitempty"`

	// ExternalIdLte SQL <= operator, may not work with all column types
	ExternalIdLte *string `form:"external_id__lte,omitempty" json:"external_id__lte,omitempty"`

	// ExternalIdIn SQL IN operator, permits comma-separated values
	ExternalIdIn *string `form:"external_id__in,omitempty" json:"external_id__in,omitempty"`

	// ExternalIdNin SQL NOT IN operator, permits comma-separated values
	ExternalIdNin *string `form:"external_id__nin,omitempty" json:"external_id__nin,omitempty"`

	// ExternalIdNotin SQL NOT IN operator, permits comma-separated values
	ExternalIdNotin *string `form:"external_id__notin,omitempty" json:"external_id__notin,omitempty"`

	// ExternalIdIsnull SQL IS NULL operator, value is ignored
	ExternalIdIsnull *string `form:"external_id__isnull,omitempty" json:"external_id__isnull,omitempty"`

	// ExternalIdNisnull SQL IS NOT NULL operator, value is ignored
	ExternalIdNisnull *string `form:"external_id__nisnull,omitempty" json:"external_id__nisnull,omitempty"`

	// ExternalIdIsnotnull SQL IS NOT NULL operator, value is ignored
	ExternalIdIsnotnull *string `form:"external_id__isnotnull,omitempty" json:"external_id__isnotnull,omitempty"`

	// ExternalIdL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdL *string `form:"external_id__l,omitempty" json:"external_id__l,omitempty"`

	// ExternalIdLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdLike *string `form:"external_id__like,omitempty" json:"external_id__like,omitempty"`

	// ExternalIdNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNl *string `form:"external_id__nl,omitempty" json:"external_id__nl,omitempty"`

	// ExternalIdNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNlike *string `form:"external_id__nlike,omitempty" json:"external_id__nlike,omitempty"`

	// ExternalIdNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNotlike *string `form:"external_id__notlike,omitempty" json:"external_id__notlike,omitempty"`

	// ExternalIdIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdIl *string `form:"external_id__il,omitempty" json:"external_id__il,omitempty"`

	// ExternalIdIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdIlike *string `form:"external_id__ilike,omitempty" json:"external_id__ilike,omitempty"`

	// ExternalIdNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNil *string `form:"external_id__nil,omitempty" json:"external_id__nil,omitempty"`

	// ExternalIdNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNilike *string `form:"external_id__nilike,omitempty" json:"external_id__nilike,omitempty"`

	// ExternalIdNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	ExternalIdNotilike *string `form:"external_id__notilike,omitempty" json:"external_id__notilike,omitempty"`

	// NameEq SQL = operator
	NameEq *string `form:"name__eq,omitempty" json:"name__eq,omitempty"`

	// NameNe SQL != operator
	NameNe *string `form:"name__ne,omitempty" json:"name__ne,omitempty"`

	// NameGt SQL > operator, may not work with all column types
	NameGt *string `form:"name__gt,omitempty" json:"name__gt,omitempty"`

	// NameGte SQL >= operator, may not work with all column types
	NameGte *string `form:"name__gte,omitempty" json:"name__gte,omitempty"`

	// NameLt SQL < operator, may not work with all column types
	NameLt *string `form:"name__lt,omitempty" json:"name__lt,omitempty"`

	// NameLte SQL <= operator, may not work with all column types
	NameLte *string `form:"name__lte,omitempty" json:"name__lte,omitempty"`

	// NameIn SQL IN operator, permits comma-separated values
	NameIn *string `form:"name__in,omitempty" json:"name__in,omitempty"`

	// NameNin SQL NOT IN operator, permits comma-separated values
	NameNin *string `form:"name__nin,omitempty" json:"name__nin,omitempty"`

	// NameNotin SQL NOT IN operator, permits comma-separated values
	NameNotin *string `form:"name__notin,omitempty" json:"name__notin,omitempty"`

	// NameIsnull SQL IS NULL operator, value is ignored
	NameIsnull *string `form:"name__isnull,omitempty" json:"name__isnull,omitempty"`

	// NameNisnull SQL IS NOT NULL operator, value is ignored
	NameNisnull *string `form:"name__nisnull,omitempty" json:"name__nisnull,omitempty"`

	// NameIsnotnull SQL IS NOT NULL operator, value is ignored
	NameIsnotnull *string `form:"name__isnotnull,omitempty" json:"name__isnotnull,omitempty"`

	// NameL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	NameL *string `form:"name__l,omitempty" json:"name__l,omitempty"`

	// NameLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	NameLike *string `form:"name__like,omitempty" json:"name__like,omitempty"`

	// NameNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNl *string `form:"name__nl,omitempty" json:"name__nl,omitempty"`

	// NameNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNlike *string `form:"name__nlike,omitempty" json:"name__nlike,omitempty"`

	// NameNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	NameNotlike *string `form:"name__notlike,omitempty" json:"name__notlike,omitempty"`

	// NameIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	NameIl *string `form:"name__il,omitempty" json:"name__il,omitempty"`

	// NameIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	NameIlike *string `form:"name__ilike,omitempty" json:"name__ilike,omitempty"`

	// NameNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNil *string `form:"name__nil,omitempty" json:"name__nil,omitempty"`

	// NameNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNilike *string `form:"name__nilike,omitempty" json:"name__nilike,omitempty"`

	// NameNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	NameNotilike *string `form:"name__notilike,omitempty" json:"name__notilike,omitempty"`

	// TypeEq SQL = operator
	TypeEq *string `form:"type__eq,omitempty" json:"type__eq,omitempty"`

	// TypeNe SQL != operator
	TypeNe *string `form:"type__ne,omitempty" json:"type__ne,omitempty"`

	// TypeGt SQL > operator, may not work with all column types
	TypeGt *string `form:"type__gt,omitempty" json:"type__gt,omitempty"`

	// TypeGte SQL >= operator, may not work with all column types
	TypeGte *string `form:"type__gte,omitempty" json:"type__gte,omitempty"`

	// TypeLt SQL < operator, may not work with all column types
	TypeLt *string `form:"type__lt,omitempty" json:"type__lt,omitempty"`

	// TypeLte SQL <= operator, may not work with all column types
	TypeLte *string `form:"type__lte,omitempty" json:"type__lte,omitempty"`

	// TypeIn SQL IN operator, permits comma-separated values
	TypeIn *string `form:"type__in,omitempty" json:"type__in,omitempty"`

	// TypeNin SQL NOT IN operator, permits comma-separated values
	TypeNin *string `form:"type__nin,omitempty" json:"type__nin,omitempty"`

	// TypeNotin SQL NOT IN operator, permits comma-separated values
	TypeNotin *string `form:"type__notin,omitempty" json:"type__notin,omitempty"`

	// TypeIsnull SQL IS NULL operator, value is ignored
	TypeIsnull *string `form:"type__isnull,omitempty" json:"type__isnull,omitempty"`

	// TypeNisnull SQL IS NOT NULL operator, value is ignored
	TypeNisnull *string `form:"type__nisnull,omitempty" json:"type__nisnull,omitempty"`

	// TypeIsnotnull SQL IS NOT NULL operator, value is ignored
	TypeIsnotnull *string `form:"type__isnotnull,omitempty" json:"type__isnotnull,omitempty"`

	// TypeL SQL LIKE operator, value is implicitly prefixed and suffixed with %
	TypeL *string `form:"type__l,omitempty" json:"type__l,omitempty"`

	// TypeLike SQL LIKE operator, value is implicitly prefixed and suffixed with %
	TypeLike *string `form:"type__like,omitempty" json:"type__like,omitempty"`

	// TypeNl SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TypeNl *string `form:"type__nl,omitempty" json:"type__nl,omitempty"`

	// TypeNlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TypeNlike *string `form:"type__nlike,omitempty" json:"type__nlike,omitempty"`

	// TypeNotlike SQL NOT LIKE operator, value is implicitly prefixed and suffixed with %
	TypeNotlike *string `form:"type__notlike,omitempty" json:"type__notlike,omitempty"`

	// TypeIl SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeIl *string `form:"type__il,omitempty" json:"type__il,omitempty"`

	// TypeIlike SQL ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeIlike *string `form:"type__ilike,omitempty" json:"type__ilike,omitempty"`

	// TypeNil SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeNil *string `form:"type__nil,omitempty" json:"type__nil,omitempty"`

	// TypeNilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeNilike *string `form:"type__nilike,omitempty" json:"type__nilike,omitempty"`

	// TypeNotilike SQL NOT ILIKE operator, value is implicitly prefixed and suffixed with %
	TypeNotilike *string `form:"type__notilike,omitempty" json:"type__notilike,omitempty"`
}

// PostPhysicalThingsJSONBody defines parameters for PostPhysicalThings.
type PostPhysicalThingsJSONBody = []PhysicalThing

// PostFuzzesJSONRequestBody defines body for PostFuzzes for application/json ContentType.
type PostFuzzesJSONRequestBody = PostFuzzesJSONBody

// PatchFuzzJSONRequestBody defines body for PatchFuzz for application/json ContentType.
type PatchFuzzJSONRequestBody = Fuzz

// PutFuzzJSONRequestBody defines body for PutFuzz for application/json ContentType.
type PutFuzzJSONRequestBody = Fuzz

// PostLocationHistoriesJSONRequestBody defines body for PostLocationHistories for application/json ContentType.
type PostLocationHistoriesJSONRequestBody = PostLocationHistoriesJSONBody

// PatchLocationHistoryJSONRequestBody defines body for PatchLocationHistory for application/json ContentType.
type PatchLocationHistoryJSONRequestBody = LocationHistory

// PutLocationHistoryJSONRequestBody defines body for PutLocationHistory for application/json ContentType.
type PutLocationHistoryJSONRequestBody = LocationHistory

// PostLogicalThingsJSONRequestBody defines body for PostLogicalThings for application/json ContentType.
type PostLogicalThingsJSONRequestBody = PostLogicalThingsJSONBody

// PatchLogicalThingJSONRequestBody defines body for PatchLogicalThing for application/json ContentType.
type PatchLogicalThingJSONRequestBody = LogicalThing

// PutLogicalThingJSONRequestBody defines body for PutLogicalThing for application/json ContentType.
type PutLogicalThingJSONRequestBody = LogicalThing

// PostPhysicalThingsJSONRequestBody defines body for PostPhysicalThings for application/json ContentType.
type PostPhysicalThingsJSONRequestBody = PostPhysicalThingsJSONBody

// PatchPhysicalThingJSONRequestBody defines body for PatchPhysicalThing for application/json ContentType.
type PatchPhysicalThingJSONRequestBody = PhysicalThing

// PutPhysicalThingJSONRequestBody defines body for PutPhysicalThing for application/json ContentType.
type PutPhysicalThingJSONRequestBody = PhysicalThing

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetFuzzes request
	GetFuzzes(ctx context.Context, params *GetFuzzesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFuzzesWithBody request with any body
	PostFuzzesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFuzzes(ctx context.Context, body PostFuzzesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFuzz request
	DeleteFuzz(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFuzz request
	GetFuzz(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFuzzWithBody request with any body
	PatchFuzzWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFuzz(ctx context.Context, primaryKey interface{}, body PatchFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutFuzzWithBody request with any body
	PutFuzzWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutFuzz(ctx context.Context, primaryKey interface{}, body PutFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationHistories request
	GetLocationHistories(ctx context.Context, params *GetLocationHistoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLocationHistoriesWithBody request with any body
	PostLocationHistoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLocationHistories(ctx context.Context, body PostLocationHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocationHistory request
	DeleteLocationHistory(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocationHistory request
	GetLocationHistory(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLocationHistoryWithBody request with any body
	PatchLocationHistoryWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLocationHistory(ctx context.Context, primaryKey interface{}, body PatchLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLocationHistoryWithBody request with any body
	PutLocationHistoryWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLocationHistory(ctx context.Context, primaryKey interface{}, body PutLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogicalThings request
	GetLogicalThings(ctx context.Context, params *GetLogicalThingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogicalThingsWithBody request with any body
	PostLogicalThingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogicalThings(ctx context.Context, body PostLogicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLogicalThing request
	DeleteLogicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogicalThing request
	GetLogicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchLogicalThingWithBody request with any body
	PatchLogicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchLogicalThing(ctx context.Context, primaryKey interface{}, body PatchLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLogicalThingWithBody request with any body
	PutLogicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLogicalThing(ctx context.Context, primaryKey interface{}, body PutLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPhysicalThings request
	GetPhysicalThings(ctx context.Context, params *GetPhysicalThingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPhysicalThingsWithBody request with any body
	PostPhysicalThingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPhysicalThings(ctx context.Context, body PostPhysicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePhysicalThing request
	DeletePhysicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPhysicalThing request
	GetPhysicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchPhysicalThingWithBody request with any body
	PatchPhysicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchPhysicalThing(ctx context.Context, primaryKey interface{}, body PatchPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPhysicalThingWithBody request with any body
	PutPhysicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPhysicalThing(ctx context.Context, primaryKey interface{}, body PutPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFuzzes(ctx context.Context, params *GetFuzzesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFuzzesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFuzzesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFuzzesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFuzzes(ctx context.Context, body PostFuzzesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFuzzesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFuzz(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFuzzRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFuzz(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFuzzRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFuzzWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFuzzRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFuzz(ctx context.Context, primaryKey interface{}, body PatchFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFuzzRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFuzzWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFuzzRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutFuzz(ctx context.Context, primaryKey interface{}, body PutFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutFuzzRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationHistories(ctx context.Context, params *GetLocationHistoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationHistoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocationHistoriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocationHistoriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocationHistories(ctx context.Context, body PostLocationHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocationHistoriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocationHistory(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocationHistoryRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocationHistory(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationHistoryRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLocationHistoryWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLocationHistoryRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLocationHistory(ctx context.Context, primaryKey interface{}, body PatchLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLocationHistoryRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLocationHistoryWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLocationHistoryRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLocationHistory(ctx context.Context, primaryKey interface{}, body PutLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLocationHistoryRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogicalThings(ctx context.Context, params *GetLogicalThingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogicalThingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogicalThingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLogicalThingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogicalThings(ctx context.Context, body PostLogicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLogicalThingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLogicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLogicalThingRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogicalThingRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLogicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLogicalThingRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchLogicalThing(ctx context.Context, primaryKey interface{}, body PatchLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchLogicalThingRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLogicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLogicalThingRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLogicalThing(ctx context.Context, primaryKey interface{}, body PutLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLogicalThingRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPhysicalThings(ctx context.Context, params *GetPhysicalThingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPhysicalThingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPhysicalThingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPhysicalThingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPhysicalThings(ctx context.Context, body PostPhysicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPhysicalThingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePhysicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePhysicalThingRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPhysicalThing(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPhysicalThingRequest(c.Server, primaryKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPhysicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPhysicalThingRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchPhysicalThing(ctx context.Context, primaryKey interface{}, body PatchPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchPhysicalThingRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPhysicalThingWithBody(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPhysicalThingRequestWithBody(c.Server, primaryKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPhysicalThing(ctx context.Context, primaryKey interface{}, body PutPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPhysicalThingRequest(c.Server, primaryKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFuzzesRequest generates requests for GetFuzzes
func NewGetFuzzesRequest(server string, params *GetFuzzesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fuzzes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__eq", runtime.ParamLocationQuery, *params.Column1Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__ne", runtime.ParamLocationQuery, *params.Column1Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__gt", runtime.ParamLocationQuery, *params.Column1Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__gte", runtime.ParamLocationQuery, *params.Column1Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__lt", runtime.ParamLocationQuery, *params.Column1Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__lte", runtime.ParamLocationQuery, *params.Column1Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__in", runtime.ParamLocationQuery, *params.Column1In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__nin", runtime.ParamLocationQuery, *params.Column1Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__notin", runtime.ParamLocationQuery, *params.Column1Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__isnull", runtime.ParamLocationQuery, *params.Column1Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__nisnull", runtime.ParamLocationQuery, *params.Column1Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__isnotnull", runtime.ParamLocationQuery, *params.Column1Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__l", runtime.ParamLocationQuery, *params.Column1L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__like", runtime.ParamLocationQuery, *params.Column1Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__nl", runtime.ParamLocationQuery, *params.Column1Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__nlike", runtime.ParamLocationQuery, *params.Column1Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__notlike", runtime.ParamLocationQuery, *params.Column1Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__il", runtime.ParamLocationQuery, *params.Column1Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__ilike", runtime.ParamLocationQuery, *params.Column1Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__nil", runtime.ParamLocationQuery, *params.Column1Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__nilike", runtime.ParamLocationQuery, *params.Column1Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column1Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column1__notilike", runtime.ParamLocationQuery, *params.Column1Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__eq", runtime.ParamLocationQuery, *params.Column2Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__ne", runtime.ParamLocationQuery, *params.Column2Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__gt", runtime.ParamLocationQuery, *params.Column2Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__gte", runtime.ParamLocationQuery, *params.Column2Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__lt", runtime.ParamLocationQuery, *params.Column2Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__lte", runtime.ParamLocationQuery, *params.Column2Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__in", runtime.ParamLocationQuery, *params.Column2In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__nin", runtime.ParamLocationQuery, *params.Column2Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__notin", runtime.ParamLocationQuery, *params.Column2Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__isnull", runtime.ParamLocationQuery, *params.Column2Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__nisnull", runtime.ParamLocationQuery, *params.Column2Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__isnotnull", runtime.ParamLocationQuery, *params.Column2Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__l", runtime.ParamLocationQuery, *params.Column2L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__like", runtime.ParamLocationQuery, *params.Column2Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__nl", runtime.ParamLocationQuery, *params.Column2Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__nlike", runtime.ParamLocationQuery, *params.Column2Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__notlike", runtime.ParamLocationQuery, *params.Column2Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__il", runtime.ParamLocationQuery, *params.Column2Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__ilike", runtime.ParamLocationQuery, *params.Column2Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__nil", runtime.ParamLocationQuery, *params.Column2Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__nilike", runtime.ParamLocationQuery, *params.Column2Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column2Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column2__notilike", runtime.ParamLocationQuery, *params.Column2Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__eq", runtime.ParamLocationQuery, *params.Column7Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__ne", runtime.ParamLocationQuery, *params.Column7Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__gt", runtime.ParamLocationQuery, *params.Column7Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__gte", runtime.ParamLocationQuery, *params.Column7Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__lt", runtime.ParamLocationQuery, *params.Column7Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__lte", runtime.ParamLocationQuery, *params.Column7Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__in", runtime.ParamLocationQuery, *params.Column7In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__nin", runtime.ParamLocationQuery, *params.Column7Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__notin", runtime.ParamLocationQuery, *params.Column7Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__isnull", runtime.ParamLocationQuery, *params.Column7Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__nisnull", runtime.ParamLocationQuery, *params.Column7Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__isnotnull", runtime.ParamLocationQuery, *params.Column7Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__l", runtime.ParamLocationQuery, *params.Column7L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__like", runtime.ParamLocationQuery, *params.Column7Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__nl", runtime.ParamLocationQuery, *params.Column7Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__nlike", runtime.ParamLocationQuery, *params.Column7Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__notlike", runtime.ParamLocationQuery, *params.Column7Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__il", runtime.ParamLocationQuery, *params.Column7Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__ilike", runtime.ParamLocationQuery, *params.Column7Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__nil", runtime.ParamLocationQuery, *params.Column7Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__nilike", runtime.ParamLocationQuery, *params.Column7Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column7Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column7__notilike", runtime.ParamLocationQuery, *params.Column7Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__eq", runtime.ParamLocationQuery, *params.Column8Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__ne", runtime.ParamLocationQuery, *params.Column8Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__gt", runtime.ParamLocationQuery, *params.Column8Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__gte", runtime.ParamLocationQuery, *params.Column8Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__lt", runtime.ParamLocationQuery, *params.Column8Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__lte", runtime.ParamLocationQuery, *params.Column8Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__in", runtime.ParamLocationQuery, *params.Column8In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__nin", runtime.ParamLocationQuery, *params.Column8Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__notin", runtime.ParamLocationQuery, *params.Column8Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__isnull", runtime.ParamLocationQuery, *params.Column8Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__nisnull", runtime.ParamLocationQuery, *params.Column8Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__isnotnull", runtime.ParamLocationQuery, *params.Column8Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__l", runtime.ParamLocationQuery, *params.Column8L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__like", runtime.ParamLocationQuery, *params.Column8Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__nl", runtime.ParamLocationQuery, *params.Column8Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__nlike", runtime.ParamLocationQuery, *params.Column8Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__notlike", runtime.ParamLocationQuery, *params.Column8Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__il", runtime.ParamLocationQuery, *params.Column8Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__ilike", runtime.ParamLocationQuery, *params.Column8Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__nil", runtime.ParamLocationQuery, *params.Column8Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__nilike", runtime.ParamLocationQuery, *params.Column8Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column8Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column8__notilike", runtime.ParamLocationQuery, *params.Column8Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__eq", runtime.ParamLocationQuery, *params.Column12Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__ne", runtime.ParamLocationQuery, *params.Column12Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__gt", runtime.ParamLocationQuery, *params.Column12Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__gte", runtime.ParamLocationQuery, *params.Column12Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__lt", runtime.ParamLocationQuery, *params.Column12Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__lte", runtime.ParamLocationQuery, *params.Column12Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__in", runtime.ParamLocationQuery, *params.Column12In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__nin", runtime.ParamLocationQuery, *params.Column12Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__notin", runtime.ParamLocationQuery, *params.Column12Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__isnull", runtime.ParamLocationQuery, *params.Column12Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__nisnull", runtime.ParamLocationQuery, *params.Column12Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__isnotnull", runtime.ParamLocationQuery, *params.Column12Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__l", runtime.ParamLocationQuery, *params.Column12L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__like", runtime.ParamLocationQuery, *params.Column12Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__nl", runtime.ParamLocationQuery, *params.Column12Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__nlike", runtime.ParamLocationQuery, *params.Column12Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__notlike", runtime.ParamLocationQuery, *params.Column12Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__il", runtime.ParamLocationQuery, *params.Column12Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__ilike", runtime.ParamLocationQuery, *params.Column12Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__nil", runtime.ParamLocationQuery, *params.Column12Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__nilike", runtime.ParamLocationQuery, *params.Column12Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column12Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column12__notilike", runtime.ParamLocationQuery, *params.Column12Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__eq", runtime.ParamLocationQuery, *params.Column13Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__ne", runtime.ParamLocationQuery, *params.Column13Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__gt", runtime.ParamLocationQuery, *params.Column13Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__gte", runtime.ParamLocationQuery, *params.Column13Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__lt", runtime.ParamLocationQuery, *params.Column13Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__lte", runtime.ParamLocationQuery, *params.Column13Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__in", runtime.ParamLocationQuery, *params.Column13In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__nin", runtime.ParamLocationQuery, *params.Column13Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__notin", runtime.ParamLocationQuery, *params.Column13Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__isnull", runtime.ParamLocationQuery, *params.Column13Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__nisnull", runtime.ParamLocationQuery, *params.Column13Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__isnotnull", runtime.ParamLocationQuery, *params.Column13Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__l", runtime.ParamLocationQuery, *params.Column13L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__like", runtime.ParamLocationQuery, *params.Column13Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__nl", runtime.ParamLocationQuery, *params.Column13Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__nlike", runtime.ParamLocationQuery, *params.Column13Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__notlike", runtime.ParamLocationQuery, *params.Column13Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__il", runtime.ParamLocationQuery, *params.Column13Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__ilike", runtime.ParamLocationQuery, *params.Column13Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__nil", runtime.ParamLocationQuery, *params.Column13Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__nilike", runtime.ParamLocationQuery, *params.Column13Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column13Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column13__notilike", runtime.ParamLocationQuery, *params.Column13Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__eq", runtime.ParamLocationQuery, *params.Column14Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__ne", runtime.ParamLocationQuery, *params.Column14Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__gt", runtime.ParamLocationQuery, *params.Column14Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__gte", runtime.ParamLocationQuery, *params.Column14Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__lt", runtime.ParamLocationQuery, *params.Column14Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__lte", runtime.ParamLocationQuery, *params.Column14Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__in", runtime.ParamLocationQuery, *params.Column14In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__nin", runtime.ParamLocationQuery, *params.Column14Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__notin", runtime.ParamLocationQuery, *params.Column14Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__isnull", runtime.ParamLocationQuery, *params.Column14Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__nisnull", runtime.ParamLocationQuery, *params.Column14Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__isnotnull", runtime.ParamLocationQuery, *params.Column14Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__l", runtime.ParamLocationQuery, *params.Column14L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__like", runtime.ParamLocationQuery, *params.Column14Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__nl", runtime.ParamLocationQuery, *params.Column14Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__nlike", runtime.ParamLocationQuery, *params.Column14Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__notlike", runtime.ParamLocationQuery, *params.Column14Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__il", runtime.ParamLocationQuery, *params.Column14Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__ilike", runtime.ParamLocationQuery, *params.Column14Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__nil", runtime.ParamLocationQuery, *params.Column14Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__nilike", runtime.ParamLocationQuery, *params.Column14Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column14Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column14__notilike", runtime.ParamLocationQuery, *params.Column14Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__eq", runtime.ParamLocationQuery, *params.Column19Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__ne", runtime.ParamLocationQuery, *params.Column19Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__gt", runtime.ParamLocationQuery, *params.Column19Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__gte", runtime.ParamLocationQuery, *params.Column19Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__lt", runtime.ParamLocationQuery, *params.Column19Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__lte", runtime.ParamLocationQuery, *params.Column19Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__in", runtime.ParamLocationQuery, *params.Column19In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__nin", runtime.ParamLocationQuery, *params.Column19Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__notin", runtime.ParamLocationQuery, *params.Column19Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__isnull", runtime.ParamLocationQuery, *params.Column19Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__nisnull", runtime.ParamLocationQuery, *params.Column19Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__isnotnull", runtime.ParamLocationQuery, *params.Column19Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__l", runtime.ParamLocationQuery, *params.Column19L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__like", runtime.ParamLocationQuery, *params.Column19Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__nl", runtime.ParamLocationQuery, *params.Column19Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__nlike", runtime.ParamLocationQuery, *params.Column19Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__notlike", runtime.ParamLocationQuery, *params.Column19Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__il", runtime.ParamLocationQuery, *params.Column19Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__ilike", runtime.ParamLocationQuery, *params.Column19Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__nil", runtime.ParamLocationQuery, *params.Column19Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__nilike", runtime.ParamLocationQuery, *params.Column19Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column19Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column19__notilike", runtime.ParamLocationQuery, *params.Column19Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__eq", runtime.ParamLocationQuery, *params.Column20Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__ne", runtime.ParamLocationQuery, *params.Column20Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__gt", runtime.ParamLocationQuery, *params.Column20Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__gte", runtime.ParamLocationQuery, *params.Column20Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__lt", runtime.ParamLocationQuery, *params.Column20Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__lte", runtime.ParamLocationQuery, *params.Column20Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__in", runtime.ParamLocationQuery, *params.Column20In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__nin", runtime.ParamLocationQuery, *params.Column20Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__notin", runtime.ParamLocationQuery, *params.Column20Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__isnull", runtime.ParamLocationQuery, *params.Column20Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__nisnull", runtime.ParamLocationQuery, *params.Column20Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__isnotnull", runtime.ParamLocationQuery, *params.Column20Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__l", runtime.ParamLocationQuery, *params.Column20L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__like", runtime.ParamLocationQuery, *params.Column20Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__nl", runtime.ParamLocationQuery, *params.Column20Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__nlike", runtime.ParamLocationQuery, *params.Column20Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__notlike", runtime.ParamLocationQuery, *params.Column20Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__il", runtime.ParamLocationQuery, *params.Column20Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__ilike", runtime.ParamLocationQuery, *params.Column20Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__nil", runtime.ParamLocationQuery, *params.Column20Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__nilike", runtime.ParamLocationQuery, *params.Column20Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column20Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column20__notilike", runtime.ParamLocationQuery, *params.Column20Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__eq", runtime.ParamLocationQuery, *params.Column21Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__ne", runtime.ParamLocationQuery, *params.Column21Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__gt", runtime.ParamLocationQuery, *params.Column21Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__gte", runtime.ParamLocationQuery, *params.Column21Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__lt", runtime.ParamLocationQuery, *params.Column21Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__lte", runtime.ParamLocationQuery, *params.Column21Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__in", runtime.ParamLocationQuery, *params.Column21In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__nin", runtime.ParamLocationQuery, *params.Column21Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__notin", runtime.ParamLocationQuery, *params.Column21Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__isnull", runtime.ParamLocationQuery, *params.Column21Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__nisnull", runtime.ParamLocationQuery, *params.Column21Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__isnotnull", runtime.ParamLocationQuery, *params.Column21Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__l", runtime.ParamLocationQuery, *params.Column21L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__like", runtime.ParamLocationQuery, *params.Column21Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__nl", runtime.ParamLocationQuery, *params.Column21Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__nlike", runtime.ParamLocationQuery, *params.Column21Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__notlike", runtime.ParamLocationQuery, *params.Column21Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__il", runtime.ParamLocationQuery, *params.Column21Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__ilike", runtime.ParamLocationQuery, *params.Column21Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__nil", runtime.ParamLocationQuery, *params.Column21Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__nilike", runtime.ParamLocationQuery, *params.Column21Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column21Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column21__notilike", runtime.ParamLocationQuery, *params.Column21Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__eq", runtime.ParamLocationQuery, *params.Column22Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__ne", runtime.ParamLocationQuery, *params.Column22Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__gt", runtime.ParamLocationQuery, *params.Column22Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__gte", runtime.ParamLocationQuery, *params.Column22Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__lt", runtime.ParamLocationQuery, *params.Column22Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__lte", runtime.ParamLocationQuery, *params.Column22Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__in", runtime.ParamLocationQuery, *params.Column22In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__nin", runtime.ParamLocationQuery, *params.Column22Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__notin", runtime.ParamLocationQuery, *params.Column22Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__isnull", runtime.ParamLocationQuery, *params.Column22Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__nisnull", runtime.ParamLocationQuery, *params.Column22Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__isnotnull", runtime.ParamLocationQuery, *params.Column22Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__l", runtime.ParamLocationQuery, *params.Column22L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__like", runtime.ParamLocationQuery, *params.Column22Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__nl", runtime.ParamLocationQuery, *params.Column22Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__nlike", runtime.ParamLocationQuery, *params.Column22Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__notlike", runtime.ParamLocationQuery, *params.Column22Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__il", runtime.ParamLocationQuery, *params.Column22Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__ilike", runtime.ParamLocationQuery, *params.Column22Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__nil", runtime.ParamLocationQuery, *params.Column22Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__nilike", runtime.ParamLocationQuery, *params.Column22Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column22Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column22__notilike", runtime.ParamLocationQuery, *params.Column22Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__eq", runtime.ParamLocationQuery, *params.Column24Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__ne", runtime.ParamLocationQuery, *params.Column24Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__gt", runtime.ParamLocationQuery, *params.Column24Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__gte", runtime.ParamLocationQuery, *params.Column24Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__lt", runtime.ParamLocationQuery, *params.Column24Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__lte", runtime.ParamLocationQuery, *params.Column24Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__in", runtime.ParamLocationQuery, *params.Column24In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__nin", runtime.ParamLocationQuery, *params.Column24Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__notin", runtime.ParamLocationQuery, *params.Column24Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__isnull", runtime.ParamLocationQuery, *params.Column24Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__nisnull", runtime.ParamLocationQuery, *params.Column24Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__isnotnull", runtime.ParamLocationQuery, *params.Column24Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__l", runtime.ParamLocationQuery, *params.Column24L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__like", runtime.ParamLocationQuery, *params.Column24Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__nl", runtime.ParamLocationQuery, *params.Column24Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__nlike", runtime.ParamLocationQuery, *params.Column24Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__notlike", runtime.ParamLocationQuery, *params.Column24Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__il", runtime.ParamLocationQuery, *params.Column24Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__ilike", runtime.ParamLocationQuery, *params.Column24Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__nil", runtime.ParamLocationQuery, *params.Column24Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__nilike", runtime.ParamLocationQuery, *params.Column24Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column24Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column24__notilike", runtime.ParamLocationQuery, *params.Column24Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__eq", runtime.ParamLocationQuery, *params.Column26Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__ne", runtime.ParamLocationQuery, *params.Column26Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__gt", runtime.ParamLocationQuery, *params.Column26Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__gte", runtime.ParamLocationQuery, *params.Column26Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__lt", runtime.ParamLocationQuery, *params.Column26Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__lte", runtime.ParamLocationQuery, *params.Column26Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__in", runtime.ParamLocationQuery, *params.Column26In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__nin", runtime.ParamLocationQuery, *params.Column26Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__notin", runtime.ParamLocationQuery, *params.Column26Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__isnull", runtime.ParamLocationQuery, *params.Column26Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__nisnull", runtime.ParamLocationQuery, *params.Column26Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__isnotnull", runtime.ParamLocationQuery, *params.Column26Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__l", runtime.ParamLocationQuery, *params.Column26L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__like", runtime.ParamLocationQuery, *params.Column26Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__nl", runtime.ParamLocationQuery, *params.Column26Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__nlike", runtime.ParamLocationQuery, *params.Column26Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__notlike", runtime.ParamLocationQuery, *params.Column26Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__il", runtime.ParamLocationQuery, *params.Column26Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__ilike", runtime.ParamLocationQuery, *params.Column26Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__nil", runtime.ParamLocationQuery, *params.Column26Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__nilike", runtime.ParamLocationQuery, *params.Column26Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column26Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column26__notilike", runtime.ParamLocationQuery, *params.Column26Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__eq", runtime.ParamLocationQuery, *params.Column32Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__ne", runtime.ParamLocationQuery, *params.Column32Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__gt", runtime.ParamLocationQuery, *params.Column32Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__gte", runtime.ParamLocationQuery, *params.Column32Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__lt", runtime.ParamLocationQuery, *params.Column32Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__lte", runtime.ParamLocationQuery, *params.Column32Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__in", runtime.ParamLocationQuery, *params.Column32In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__nin", runtime.ParamLocationQuery, *params.Column32Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__notin", runtime.ParamLocationQuery, *params.Column32Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__isnull", runtime.ParamLocationQuery, *params.Column32Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__nisnull", runtime.ParamLocationQuery, *params.Column32Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__isnotnull", runtime.ParamLocationQuery, *params.Column32Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__l", runtime.ParamLocationQuery, *params.Column32L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__like", runtime.ParamLocationQuery, *params.Column32Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__nl", runtime.ParamLocationQuery, *params.Column32Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__nlike", runtime.ParamLocationQuery, *params.Column32Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__notlike", runtime.ParamLocationQuery, *params.Column32Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__il", runtime.ParamLocationQuery, *params.Column32Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__ilike", runtime.ParamLocationQuery, *params.Column32Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__nil", runtime.ParamLocationQuery, *params.Column32Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__nilike", runtime.ParamLocationQuery, *params.Column32Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column32Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column32__notilike", runtime.ParamLocationQuery, *params.Column32Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Eq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__eq", runtime.ParamLocationQuery, *params.Column33Eq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Ne != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__ne", runtime.ParamLocationQuery, *params.Column33Ne); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Gt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__gt", runtime.ParamLocationQuery, *params.Column33Gt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Gte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__gte", runtime.ParamLocationQuery, *params.Column33Gte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Lt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__lt", runtime.ParamLocationQuery, *params.Column33Lt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Lte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__lte", runtime.ParamLocationQuery, *params.Column33Lte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33In != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__in", runtime.ParamLocationQuery, *params.Column33In); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Nin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__nin", runtime.ParamLocationQuery, *params.Column33Nin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Notin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__notin", runtime.ParamLocationQuery, *params.Column33Notin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Isnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__isnull", runtime.ParamLocationQuery, *params.Column33Isnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Nisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__nisnull", runtime.ParamLocationQuery, *params.Column33Nisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Isnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__isnotnull", runtime.ParamLocationQuery, *params.Column33Isnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33L != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__l", runtime.ParamLocationQuery, *params.Column33L); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Like != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__like", runtime.ParamLocationQuery, *params.Column33Like); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Nl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__nl", runtime.ParamLocationQuery, *params.Column33Nl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Nlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__nlike", runtime.ParamLocationQuery, *params.Column33Nlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Notlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__notlike", runtime.ParamLocationQuery, *params.Column33Notlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Il != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__il", runtime.ParamLocationQuery, *params.Column33Il); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Ilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__ilike", runtime.ParamLocationQuery, *params.Column33Ilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Nil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__nil", runtime.ParamLocationQuery, *params.Column33Nil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Nilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__nilike", runtime.ParamLocationQuery, *params.Column33Nilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Column33Notilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "column33__notilike", runtime.ParamLocationQuery, *params.Column33Notilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFuzzesRequest calls the generic PostFuzzes builder with application/json body
func NewPostFuzzesRequest(server string, body PostFuzzesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFuzzesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostFuzzesRequestWithBody generates requests for PostFuzzes with any type of body
func NewPostFuzzesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fuzzes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFuzzRequest generates requests for DeleteFuzz
func NewDeleteFuzzRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fuzzes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFuzzRequest generates requests for GetFuzz
func NewGetFuzzRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fuzzes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFuzzRequest calls the generic PatchFuzz builder with application/json body
func NewPatchFuzzRequest(server string, primaryKey interface{}, body PatchFuzzJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFuzzRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchFuzzRequestWithBody generates requests for PatchFuzz with any type of body
func NewPatchFuzzRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fuzzes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutFuzzRequest calls the generic PutFuzz builder with application/json body
func NewPutFuzzRequest(server string, primaryKey interface{}, body PutFuzzJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutFuzzRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutFuzzRequestWithBody generates requests for PutFuzz with any type of body
func NewPutFuzzRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fuzzes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLocationHistoriesRequest generates requests for GetLocationHistories
func NewGetLocationHistoriesRequest(server string, params *GetLocationHistoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/location-histories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__eq", runtime.ParamLocationQuery, *params.CreatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ne", runtime.ParamLocationQuery, *params.CreatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gt", runtime.ParamLocationQuery, *params.CreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gte", runtime.ParamLocationQuery, *params.CreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lt", runtime.ParamLocationQuery, *params.CreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lte", runtime.ParamLocationQuery, *params.CreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__in", runtime.ParamLocationQuery, *params.CreatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nin", runtime.ParamLocationQuery, *params.CreatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notin", runtime.ParamLocationQuery, *params.CreatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnull", runtime.ParamLocationQuery, *params.CreatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nisnull", runtime.ParamLocationQuery, *params.CreatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnotnull", runtime.ParamLocationQuery, *params.CreatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__l", runtime.ParamLocationQuery, *params.CreatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__like", runtime.ParamLocationQuery, *params.CreatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nl", runtime.ParamLocationQuery, *params.CreatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nlike", runtime.ParamLocationQuery, *params.CreatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notlike", runtime.ParamLocationQuery, *params.CreatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__il", runtime.ParamLocationQuery, *params.CreatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ilike", runtime.ParamLocationQuery, *params.CreatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nil", runtime.ParamLocationQuery, *params.CreatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nilike", runtime.ParamLocationQuery, *params.CreatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notilike", runtime.ParamLocationQuery, *params.CreatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__eq", runtime.ParamLocationQuery, *params.UpdatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ne", runtime.ParamLocationQuery, *params.UpdatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gt", runtime.ParamLocationQuery, *params.UpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gte", runtime.ParamLocationQuery, *params.UpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lt", runtime.ParamLocationQuery, *params.UpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lte", runtime.ParamLocationQuery, *params.UpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__in", runtime.ParamLocationQuery, *params.UpdatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nin", runtime.ParamLocationQuery, *params.UpdatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notin", runtime.ParamLocationQuery, *params.UpdatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nisnull", runtime.ParamLocationQuery, *params.UpdatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnotnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__l", runtime.ParamLocationQuery, *params.UpdatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__like", runtime.ParamLocationQuery, *params.UpdatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nl", runtime.ParamLocationQuery, *params.UpdatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nlike", runtime.ParamLocationQuery, *params.UpdatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notlike", runtime.ParamLocationQuery, *params.UpdatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__il", runtime.ParamLocationQuery, *params.UpdatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ilike", runtime.ParamLocationQuery, *params.UpdatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nil", runtime.ParamLocationQuery, *params.UpdatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nilike", runtime.ParamLocationQuery, *params.UpdatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notilike", runtime.ParamLocationQuery, *params.UpdatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__eq", runtime.ParamLocationQuery, *params.DeletedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ne", runtime.ParamLocationQuery, *params.DeletedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gt", runtime.ParamLocationQuery, *params.DeletedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gte", runtime.ParamLocationQuery, *params.DeletedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lt", runtime.ParamLocationQuery, *params.DeletedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lte", runtime.ParamLocationQuery, *params.DeletedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__in", runtime.ParamLocationQuery, *params.DeletedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nin", runtime.ParamLocationQuery, *params.DeletedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notin", runtime.ParamLocationQuery, *params.DeletedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnull", runtime.ParamLocationQuery, *params.DeletedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nisnull", runtime.ParamLocationQuery, *params.DeletedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnotnull", runtime.ParamLocationQuery, *params.DeletedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__l", runtime.ParamLocationQuery, *params.DeletedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__like", runtime.ParamLocationQuery, *params.DeletedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nl", runtime.ParamLocationQuery, *params.DeletedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nlike", runtime.ParamLocationQuery, *params.DeletedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notlike", runtime.ParamLocationQuery, *params.DeletedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__il", runtime.ParamLocationQuery, *params.DeletedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ilike", runtime.ParamLocationQuery, *params.DeletedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nil", runtime.ParamLocationQuery, *params.DeletedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nilike", runtime.ParamLocationQuery, *params.DeletedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notilike", runtime.ParamLocationQuery, *params.DeletedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__eq", runtime.ParamLocationQuery, *params.TimestampEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__ne", runtime.ParamLocationQuery, *params.TimestampNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__gt", runtime.ParamLocationQuery, *params.TimestampGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__gte", runtime.ParamLocationQuery, *params.TimestampGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__lt", runtime.ParamLocationQuery, *params.TimestampLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__lte", runtime.ParamLocationQuery, *params.TimestampLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__in", runtime.ParamLocationQuery, *params.TimestampIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__nin", runtime.ParamLocationQuery, *params.TimestampNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__notin", runtime.ParamLocationQuery, *params.TimestampNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__isnull", runtime.ParamLocationQuery, *params.TimestampIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__nisnull", runtime.ParamLocationQuery, *params.TimestampNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__isnotnull", runtime.ParamLocationQuery, *params.TimestampIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__l", runtime.ParamLocationQuery, *params.TimestampL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__like", runtime.ParamLocationQuery, *params.TimestampLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__nl", runtime.ParamLocationQuery, *params.TimestampNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__nlike", runtime.ParamLocationQuery, *params.TimestampNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__notlike", runtime.ParamLocationQuery, *params.TimestampNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__il", runtime.ParamLocationQuery, *params.TimestampIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__ilike", runtime.ParamLocationQuery, *params.TimestampIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__nil", runtime.ParamLocationQuery, *params.TimestampNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__nilike", runtime.ParamLocationQuery, *params.TimestampNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimestampNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp__notilike", runtime.ParamLocationQuery, *params.TimestampNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__eq", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__ne", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__gt", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__gte", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__lt", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__lte", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__in", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nin", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__notin", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__isnull", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nisnull", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__isnotnull", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__l", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__like", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nl", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nlike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__notlike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__il", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__ilike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nil", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nilike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__notilike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLocationHistoriesRequest calls the generic PostLocationHistories builder with application/json body
func NewPostLocationHistoriesRequest(server string, body PostLocationHistoriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLocationHistoriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLocationHistoriesRequestWithBody generates requests for PostLocationHistories with any type of body
func NewPostLocationHistoriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/location-histories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocationHistoryRequest generates requests for DeleteLocationHistory
func NewDeleteLocationHistoryRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/location-histories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationHistoryRequest generates requests for GetLocationHistory
func NewGetLocationHistoryRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/location-histories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchLocationHistoryRequest calls the generic PatchLocationHistory builder with application/json body
func NewPatchLocationHistoryRequest(server string, primaryKey interface{}, body PatchLocationHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLocationHistoryRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchLocationHistoryRequestWithBody generates requests for PatchLocationHistory with any type of body
func NewPatchLocationHistoryRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/location-histories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutLocationHistoryRequest calls the generic PutLocationHistory builder with application/json body
func NewPutLocationHistoryRequest(server string, primaryKey interface{}, body PutLocationHistoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLocationHistoryRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutLocationHistoryRequestWithBody generates requests for PutLocationHistory with any type of body
func NewPutLocationHistoryRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/location-histories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogicalThingsRequest generates requests for GetLogicalThings
func NewGetLogicalThingsRequest(server string, params *GetLogicalThingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logical-things")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__eq", runtime.ParamLocationQuery, *params.CreatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ne", runtime.ParamLocationQuery, *params.CreatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gt", runtime.ParamLocationQuery, *params.CreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gte", runtime.ParamLocationQuery, *params.CreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lt", runtime.ParamLocationQuery, *params.CreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lte", runtime.ParamLocationQuery, *params.CreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__in", runtime.ParamLocationQuery, *params.CreatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nin", runtime.ParamLocationQuery, *params.CreatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notin", runtime.ParamLocationQuery, *params.CreatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnull", runtime.ParamLocationQuery, *params.CreatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nisnull", runtime.ParamLocationQuery, *params.CreatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnotnull", runtime.ParamLocationQuery, *params.CreatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__l", runtime.ParamLocationQuery, *params.CreatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__like", runtime.ParamLocationQuery, *params.CreatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nl", runtime.ParamLocationQuery, *params.CreatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nlike", runtime.ParamLocationQuery, *params.CreatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notlike", runtime.ParamLocationQuery, *params.CreatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__il", runtime.ParamLocationQuery, *params.CreatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ilike", runtime.ParamLocationQuery, *params.CreatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nil", runtime.ParamLocationQuery, *params.CreatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nilike", runtime.ParamLocationQuery, *params.CreatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notilike", runtime.ParamLocationQuery, *params.CreatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__eq", runtime.ParamLocationQuery, *params.UpdatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ne", runtime.ParamLocationQuery, *params.UpdatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gt", runtime.ParamLocationQuery, *params.UpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gte", runtime.ParamLocationQuery, *params.UpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lt", runtime.ParamLocationQuery, *params.UpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lte", runtime.ParamLocationQuery, *params.UpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__in", runtime.ParamLocationQuery, *params.UpdatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nin", runtime.ParamLocationQuery, *params.UpdatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notin", runtime.ParamLocationQuery, *params.UpdatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nisnull", runtime.ParamLocationQuery, *params.UpdatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnotnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__l", runtime.ParamLocationQuery, *params.UpdatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__like", runtime.ParamLocationQuery, *params.UpdatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nl", runtime.ParamLocationQuery, *params.UpdatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nlike", runtime.ParamLocationQuery, *params.UpdatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notlike", runtime.ParamLocationQuery, *params.UpdatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__il", runtime.ParamLocationQuery, *params.UpdatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ilike", runtime.ParamLocationQuery, *params.UpdatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nil", runtime.ParamLocationQuery, *params.UpdatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nilike", runtime.ParamLocationQuery, *params.UpdatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notilike", runtime.ParamLocationQuery, *params.UpdatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__eq", runtime.ParamLocationQuery, *params.DeletedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ne", runtime.ParamLocationQuery, *params.DeletedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gt", runtime.ParamLocationQuery, *params.DeletedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gte", runtime.ParamLocationQuery, *params.DeletedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lt", runtime.ParamLocationQuery, *params.DeletedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lte", runtime.ParamLocationQuery, *params.DeletedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__in", runtime.ParamLocationQuery, *params.DeletedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nin", runtime.ParamLocationQuery, *params.DeletedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notin", runtime.ParamLocationQuery, *params.DeletedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnull", runtime.ParamLocationQuery, *params.DeletedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nisnull", runtime.ParamLocationQuery, *params.DeletedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnotnull", runtime.ParamLocationQuery, *params.DeletedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__l", runtime.ParamLocationQuery, *params.DeletedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__like", runtime.ParamLocationQuery, *params.DeletedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nl", runtime.ParamLocationQuery, *params.DeletedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nlike", runtime.ParamLocationQuery, *params.DeletedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notlike", runtime.ParamLocationQuery, *params.DeletedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__il", runtime.ParamLocationQuery, *params.DeletedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ilike", runtime.ParamLocationQuery, *params.DeletedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nil", runtime.ParamLocationQuery, *params.DeletedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nilike", runtime.ParamLocationQuery, *params.DeletedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notilike", runtime.ParamLocationQuery, *params.DeletedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__eq", runtime.ParamLocationQuery, *params.ExternalIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__ne", runtime.ParamLocationQuery, *params.ExternalIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__gt", runtime.ParamLocationQuery, *params.ExternalIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__gte", runtime.ParamLocationQuery, *params.ExternalIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__lt", runtime.ParamLocationQuery, *params.ExternalIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__lte", runtime.ParamLocationQuery, *params.ExternalIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__in", runtime.ParamLocationQuery, *params.ExternalIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nin", runtime.ParamLocationQuery, *params.ExternalIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__notin", runtime.ParamLocationQuery, *params.ExternalIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__isnull", runtime.ParamLocationQuery, *params.ExternalIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nisnull", runtime.ParamLocationQuery, *params.ExternalIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__isnotnull", runtime.ParamLocationQuery, *params.ExternalIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__l", runtime.ParamLocationQuery, *params.ExternalIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__like", runtime.ParamLocationQuery, *params.ExternalIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nl", runtime.ParamLocationQuery, *params.ExternalIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nlike", runtime.ParamLocationQuery, *params.ExternalIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__notlike", runtime.ParamLocationQuery, *params.ExternalIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__il", runtime.ParamLocationQuery, *params.ExternalIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__ilike", runtime.ParamLocationQuery, *params.ExternalIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nil", runtime.ParamLocationQuery, *params.ExternalIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nilike", runtime.ParamLocationQuery, *params.ExternalIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__notilike", runtime.ParamLocationQuery, *params.ExternalIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__eq", runtime.ParamLocationQuery, *params.NameEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ne", runtime.ParamLocationQuery, *params.NameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__gt", runtime.ParamLocationQuery, *params.NameGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__gte", runtime.ParamLocationQuery, *params.NameGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__lt", runtime.ParamLocationQuery, *params.NameLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__lte", runtime.ParamLocationQuery, *params.NameLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nin", runtime.ParamLocationQuery, *params.NameNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notin", runtime.ParamLocationQuery, *params.NameNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isnull", runtime.ParamLocationQuery, *params.NameIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisnull", runtime.ParamLocationQuery, *params.NameNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isnotnull", runtime.ParamLocationQuery, *params.NameIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__l", runtime.ParamLocationQuery, *params.NameL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__like", runtime.ParamLocationQuery, *params.NameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nl", runtime.ParamLocationQuery, *params.NameNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nlike", runtime.ParamLocationQuery, *params.NameNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notlike", runtime.ParamLocationQuery, *params.NameNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__il", runtime.ParamLocationQuery, *params.NameIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ilike", runtime.ParamLocationQuery, *params.NameIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nil", runtime.ParamLocationQuery, *params.NameNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nilike", runtime.ParamLocationQuery, *params.NameNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notilike", runtime.ParamLocationQuery, *params.NameNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__eq", runtime.ParamLocationQuery, *params.TypeEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ne", runtime.ParamLocationQuery, *params.TypeNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__gt", runtime.ParamLocationQuery, *params.TypeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__gte", runtime.ParamLocationQuery, *params.TypeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__lt", runtime.ParamLocationQuery, *params.TypeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__lte", runtime.ParamLocationQuery, *params.TypeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__in", runtime.ParamLocationQuery, *params.TypeIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nin", runtime.ParamLocationQuery, *params.TypeNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__notin", runtime.ParamLocationQuery, *params.TypeNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isnull", runtime.ParamLocationQuery, *params.TypeIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nisnull", runtime.ParamLocationQuery, *params.TypeNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isnotnull", runtime.ParamLocationQuery, *params.TypeIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__l", runtime.ParamLocationQuery, *params.TypeL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__like", runtime.ParamLocationQuery, *params.TypeLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nl", runtime.ParamLocationQuery, *params.TypeNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nlike", runtime.ParamLocationQuery, *params.TypeNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__notlike", runtime.ParamLocationQuery, *params.TypeNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__il", runtime.ParamLocationQuery, *params.TypeIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ilike", runtime.ParamLocationQuery, *params.TypeIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nil", runtime.ParamLocationQuery, *params.TypeNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nilike", runtime.ParamLocationQuery, *params.TypeNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__notilike", runtime.ParamLocationQuery, *params.TypeNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__eq", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__ne", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__gt", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__gte", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__lt", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__lte", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__in", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nin", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__notin", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__isnull", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nisnull", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__isnotnull", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__l", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__like", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nl", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nlike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__notlike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__il", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__ilike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nil", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__nilike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentPhysicalThingIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_physical_thing_id__notilike", runtime.ParamLocationQuery, *params.ParentPhysicalThingIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__eq", runtime.ParamLocationQuery, *params.ParentLogicalThingIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__ne", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__gt", runtime.ParamLocationQuery, *params.ParentLogicalThingIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__gte", runtime.ParamLocationQuery, *params.ParentLogicalThingIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__lt", runtime.ParamLocationQuery, *params.ParentLogicalThingIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__lte", runtime.ParamLocationQuery, *params.ParentLogicalThingIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__in", runtime.ParamLocationQuery, *params.ParentLogicalThingIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__nin", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__notin", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__isnull", runtime.ParamLocationQuery, *params.ParentLogicalThingIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__nisnull", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__isnotnull", runtime.ParamLocationQuery, *params.ParentLogicalThingIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__l", runtime.ParamLocationQuery, *params.ParentLogicalThingIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__like", runtime.ParamLocationQuery, *params.ParentLogicalThingIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__nl", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__nlike", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__notlike", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__il", runtime.ParamLocationQuery, *params.ParentLogicalThingIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__ilike", runtime.ParamLocationQuery, *params.ParentLogicalThingIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__nil", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__nilike", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ParentLogicalThingIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_logical_thing_id__notilike", runtime.ParamLocationQuery, *params.ParentLogicalThingIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLogicalThingsRequest calls the generic PostLogicalThings builder with application/json body
func NewPostLogicalThingsRequest(server string, body PostLogicalThingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLogicalThingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLogicalThingsRequestWithBody generates requests for PostLogicalThings with any type of body
func NewPostLogicalThingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logical-things")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLogicalThingRequest generates requests for DeleteLogicalThing
func NewDeleteLogicalThingRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLogicalThingRequest generates requests for GetLogicalThing
func NewGetLogicalThingRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchLogicalThingRequest calls the generic PatchLogicalThing builder with application/json body
func NewPatchLogicalThingRequest(server string, primaryKey interface{}, body PatchLogicalThingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchLogicalThingRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchLogicalThingRequestWithBody generates requests for PatchLogicalThing with any type of body
func NewPatchLogicalThingRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutLogicalThingRequest calls the generic PutLogicalThing builder with application/json body
func NewPutLogicalThingRequest(server string, primaryKey interface{}, body PutLogicalThingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLogicalThingRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutLogicalThingRequestWithBody generates requests for PutLogicalThing with any type of body
func NewPutLogicalThingRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/logical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPhysicalThingsRequest generates requests for GetPhysicalThings
func NewGetPhysicalThingsRequest(server string, params *GetPhysicalThingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/physical-things")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__eq", runtime.ParamLocationQuery, *params.IdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ne", runtime.ParamLocationQuery, *params.IdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__in", runtime.ParamLocationQuery, *params.IdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nin", runtime.ParamLocationQuery, *params.IdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notin", runtime.ParamLocationQuery, *params.IdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnull", runtime.ParamLocationQuery, *params.IdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nisnull", runtime.ParamLocationQuery, *params.IdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__isnotnull", runtime.ParamLocationQuery, *params.IdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__l", runtime.ParamLocationQuery, *params.IdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__like", runtime.ParamLocationQuery, *params.IdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nl", runtime.ParamLocationQuery, *params.IdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nlike", runtime.ParamLocationQuery, *params.IdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notlike", runtime.ParamLocationQuery, *params.IdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__il", runtime.ParamLocationQuery, *params.IdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__ilike", runtime.ParamLocationQuery, *params.IdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nil", runtime.ParamLocationQuery, *params.IdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__nilike", runtime.ParamLocationQuery, *params.IdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__notilike", runtime.ParamLocationQuery, *params.IdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__eq", runtime.ParamLocationQuery, *params.CreatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ne", runtime.ParamLocationQuery, *params.CreatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gt", runtime.ParamLocationQuery, *params.CreatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__gte", runtime.ParamLocationQuery, *params.CreatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lt", runtime.ParamLocationQuery, *params.CreatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__lte", runtime.ParamLocationQuery, *params.CreatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__in", runtime.ParamLocationQuery, *params.CreatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nin", runtime.ParamLocationQuery, *params.CreatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notin", runtime.ParamLocationQuery, *params.CreatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnull", runtime.ParamLocationQuery, *params.CreatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nisnull", runtime.ParamLocationQuery, *params.CreatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__isnotnull", runtime.ParamLocationQuery, *params.CreatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__l", runtime.ParamLocationQuery, *params.CreatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__like", runtime.ParamLocationQuery, *params.CreatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nl", runtime.ParamLocationQuery, *params.CreatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nlike", runtime.ParamLocationQuery, *params.CreatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notlike", runtime.ParamLocationQuery, *params.CreatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__il", runtime.ParamLocationQuery, *params.CreatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__ilike", runtime.ParamLocationQuery, *params.CreatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nil", runtime.ParamLocationQuery, *params.CreatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__nilike", runtime.ParamLocationQuery, *params.CreatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at__notilike", runtime.ParamLocationQuery, *params.CreatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__eq", runtime.ParamLocationQuery, *params.UpdatedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ne", runtime.ParamLocationQuery, *params.UpdatedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gt", runtime.ParamLocationQuery, *params.UpdatedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__gte", runtime.ParamLocationQuery, *params.UpdatedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lt", runtime.ParamLocationQuery, *params.UpdatedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__lte", runtime.ParamLocationQuery, *params.UpdatedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__in", runtime.ParamLocationQuery, *params.UpdatedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nin", runtime.ParamLocationQuery, *params.UpdatedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notin", runtime.ParamLocationQuery, *params.UpdatedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nisnull", runtime.ParamLocationQuery, *params.UpdatedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__isnotnull", runtime.ParamLocationQuery, *params.UpdatedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__l", runtime.ParamLocationQuery, *params.UpdatedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__like", runtime.ParamLocationQuery, *params.UpdatedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nl", runtime.ParamLocationQuery, *params.UpdatedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nlike", runtime.ParamLocationQuery, *params.UpdatedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notlike", runtime.ParamLocationQuery, *params.UpdatedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__il", runtime.ParamLocationQuery, *params.UpdatedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__ilike", runtime.ParamLocationQuery, *params.UpdatedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nil", runtime.ParamLocationQuery, *params.UpdatedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__nilike", runtime.ParamLocationQuery, *params.UpdatedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_at__notilike", runtime.ParamLocationQuery, *params.UpdatedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__eq", runtime.ParamLocationQuery, *params.DeletedAtEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ne", runtime.ParamLocationQuery, *params.DeletedAtNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gt", runtime.ParamLocationQuery, *params.DeletedAtGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__gte", runtime.ParamLocationQuery, *params.DeletedAtGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lt", runtime.ParamLocationQuery, *params.DeletedAtLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__lte", runtime.ParamLocationQuery, *params.DeletedAtLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__in", runtime.ParamLocationQuery, *params.DeletedAtIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nin", runtime.ParamLocationQuery, *params.DeletedAtNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notin", runtime.ParamLocationQuery, *params.DeletedAtNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnull", runtime.ParamLocationQuery, *params.DeletedAtIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nisnull", runtime.ParamLocationQuery, *params.DeletedAtNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__isnotnull", runtime.ParamLocationQuery, *params.DeletedAtIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__l", runtime.ParamLocationQuery, *params.DeletedAtL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__like", runtime.ParamLocationQuery, *params.DeletedAtLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nl", runtime.ParamLocationQuery, *params.DeletedAtNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nlike", runtime.ParamLocationQuery, *params.DeletedAtNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notlike", runtime.ParamLocationQuery, *params.DeletedAtNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__il", runtime.ParamLocationQuery, *params.DeletedAtIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__ilike", runtime.ParamLocationQuery, *params.DeletedAtIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nil", runtime.ParamLocationQuery, *params.DeletedAtNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__nilike", runtime.ParamLocationQuery, *params.DeletedAtNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeletedAtNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deleted_at__notilike", runtime.ParamLocationQuery, *params.DeletedAtNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__eq", runtime.ParamLocationQuery, *params.ExternalIdEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__ne", runtime.ParamLocationQuery, *params.ExternalIdNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__gt", runtime.ParamLocationQuery, *params.ExternalIdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__gte", runtime.ParamLocationQuery, *params.ExternalIdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__lt", runtime.ParamLocationQuery, *params.ExternalIdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__lte", runtime.ParamLocationQuery, *params.ExternalIdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__in", runtime.ParamLocationQuery, *params.ExternalIdIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nin", runtime.ParamLocationQuery, *params.ExternalIdNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__notin", runtime.ParamLocationQuery, *params.ExternalIdNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__isnull", runtime.ParamLocationQuery, *params.ExternalIdIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nisnull", runtime.ParamLocationQuery, *params.ExternalIdNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__isnotnull", runtime.ParamLocationQuery, *params.ExternalIdIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__l", runtime.ParamLocationQuery, *params.ExternalIdL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__like", runtime.ParamLocationQuery, *params.ExternalIdLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nl", runtime.ParamLocationQuery, *params.ExternalIdNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nlike", runtime.ParamLocationQuery, *params.ExternalIdNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__notlike", runtime.ParamLocationQuery, *params.ExternalIdNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__il", runtime.ParamLocationQuery, *params.ExternalIdIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__ilike", runtime.ParamLocationQuery, *params.ExternalIdIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nil", runtime.ParamLocationQuery, *params.ExternalIdNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__nilike", runtime.ParamLocationQuery, *params.ExternalIdNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExternalIdNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id__notilike", runtime.ParamLocationQuery, *params.ExternalIdNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__eq", runtime.ParamLocationQuery, *params.NameEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ne", runtime.ParamLocationQuery, *params.NameNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__gt", runtime.ParamLocationQuery, *params.NameGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__gte", runtime.ParamLocationQuery, *params.NameGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__lt", runtime.ParamLocationQuery, *params.NameLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__lte", runtime.ParamLocationQuery, *params.NameLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__in", runtime.ParamLocationQuery, *params.NameIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nin", runtime.ParamLocationQuery, *params.NameNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notin", runtime.ParamLocationQuery, *params.NameNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isnull", runtime.ParamLocationQuery, *params.NameIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisnull", runtime.ParamLocationQuery, *params.NameNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isnotnull", runtime.ParamLocationQuery, *params.NameIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__l", runtime.ParamLocationQuery, *params.NameL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__like", runtime.ParamLocationQuery, *params.NameLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nl", runtime.ParamLocationQuery, *params.NameNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nlike", runtime.ParamLocationQuery, *params.NameNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notlike", runtime.ParamLocationQuery, *params.NameNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__il", runtime.ParamLocationQuery, *params.NameIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ilike", runtime.ParamLocationQuery, *params.NameIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nil", runtime.ParamLocationQuery, *params.NameNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nilike", runtime.ParamLocationQuery, *params.NameNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__notilike", runtime.ParamLocationQuery, *params.NameNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeEq != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__eq", runtime.ParamLocationQuery, *params.TypeEq); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ne", runtime.ParamLocationQuery, *params.TypeNe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__gt", runtime.ParamLocationQuery, *params.TypeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__gte", runtime.ParamLocationQuery, *params.TypeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__lt", runtime.ParamLocationQuery, *params.TypeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__lte", runtime.ParamLocationQuery, *params.TypeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__in", runtime.ParamLocationQuery, *params.TypeIn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nin", runtime.ParamLocationQuery, *params.TypeNin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNotin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__notin", runtime.ParamLocationQuery, *params.TypeNotin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isnull", runtime.ParamLocationQuery, *params.TypeIsnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNisnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nisnull", runtime.ParamLocationQuery, *params.TypeNisnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIsnotnull != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__isnotnull", runtime.ParamLocationQuery, *params.TypeIsnotnull); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeL != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__l", runtime.ParamLocationQuery, *params.TypeL); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeLike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__like", runtime.ParamLocationQuery, *params.TypeLike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nl", runtime.ParamLocationQuery, *params.TypeNl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nlike", runtime.ParamLocationQuery, *params.TypeNlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNotlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__notlike", runtime.ParamLocationQuery, *params.TypeNotlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__il", runtime.ParamLocationQuery, *params.TypeIl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeIlike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__ilike", runtime.ParamLocationQuery, *params.TypeIlike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNil != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nil", runtime.ParamLocationQuery, *params.TypeNil); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__nilike", runtime.ParamLocationQuery, *params.TypeNilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeNotilike != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type__notilike", runtime.ParamLocationQuery, *params.TypeNotilike); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPhysicalThingsRequest calls the generic PostPhysicalThings builder with application/json body
func NewPostPhysicalThingsRequest(server string, body PostPhysicalThingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPhysicalThingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPhysicalThingsRequestWithBody generates requests for PostPhysicalThings with any type of body
func NewPostPhysicalThingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/physical-things")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePhysicalThingRequest generates requests for DeletePhysicalThing
func NewDeletePhysicalThingRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/physical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPhysicalThingRequest generates requests for GetPhysicalThing
func NewGetPhysicalThingRequest(server string, primaryKey interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/physical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchPhysicalThingRequest calls the generic PatchPhysicalThing builder with application/json body
func NewPatchPhysicalThingRequest(server string, primaryKey interface{}, body PatchPhysicalThingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchPhysicalThingRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPatchPhysicalThingRequestWithBody generates requests for PatchPhysicalThing with any type of body
func NewPatchPhysicalThingRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/physical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPhysicalThingRequest calls the generic PutPhysicalThing builder with application/json body
func NewPutPhysicalThingRequest(server string, primaryKey interface{}, body PutPhysicalThingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPhysicalThingRequestWithBody(server, primaryKey, "application/json", bodyReader)
}

// NewPutPhysicalThingRequestWithBody generates requests for PutPhysicalThing with any type of body
func NewPutPhysicalThingRequestWithBody(server string, primaryKey interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "primaryKey", runtime.ParamLocationPath, primaryKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/physical-things/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFuzzesWithResponse request
	GetFuzzesWithResponse(ctx context.Context, params *GetFuzzesParams, reqEditors ...RequestEditorFn) (*GetFuzzesResponse, error)

	// PostFuzzesWithBodyWithResponse request with any body
	PostFuzzesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFuzzesResponse, error)

	PostFuzzesWithResponse(ctx context.Context, body PostFuzzesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFuzzesResponse, error)

	// DeleteFuzzWithResponse request
	DeleteFuzzWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteFuzzResponse, error)

	// GetFuzzWithResponse request
	GetFuzzWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetFuzzResponse, error)

	// PatchFuzzWithBodyWithResponse request with any body
	PatchFuzzWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFuzzResponse, error)

	PatchFuzzWithResponse(ctx context.Context, primaryKey interface{}, body PatchFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFuzzResponse, error)

	// PutFuzzWithBodyWithResponse request with any body
	PutFuzzWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFuzzResponse, error)

	PutFuzzWithResponse(ctx context.Context, primaryKey interface{}, body PutFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFuzzResponse, error)

	// GetLocationHistoriesWithResponse request
	GetLocationHistoriesWithResponse(ctx context.Context, params *GetLocationHistoriesParams, reqEditors ...RequestEditorFn) (*GetLocationHistoriesResponse, error)

	// PostLocationHistoriesWithBodyWithResponse request with any body
	PostLocationHistoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocationHistoriesResponse, error)

	PostLocationHistoriesWithResponse(ctx context.Context, body PostLocationHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocationHistoriesResponse, error)

	// DeleteLocationHistoryWithResponse request
	DeleteLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteLocationHistoryResponse, error)

	// GetLocationHistoryWithResponse request
	GetLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetLocationHistoryResponse, error)

	// PatchLocationHistoryWithBodyWithResponse request with any body
	PatchLocationHistoryWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLocationHistoryResponse, error)

	PatchLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, body PatchLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLocationHistoryResponse, error)

	// PutLocationHistoryWithBodyWithResponse request with any body
	PutLocationHistoryWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLocationHistoryResponse, error)

	PutLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, body PutLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLocationHistoryResponse, error)

	// GetLogicalThingsWithResponse request
	GetLogicalThingsWithResponse(ctx context.Context, params *GetLogicalThingsParams, reqEditors ...RequestEditorFn) (*GetLogicalThingsResponse, error)

	// PostLogicalThingsWithBodyWithResponse request with any body
	PostLogicalThingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLogicalThingsResponse, error)

	PostLogicalThingsWithResponse(ctx context.Context, body PostLogicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLogicalThingsResponse, error)

	// DeleteLogicalThingWithResponse request
	DeleteLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteLogicalThingResponse, error)

	// GetLogicalThingWithResponse request
	GetLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetLogicalThingResponse, error)

	// PatchLogicalThingWithBodyWithResponse request with any body
	PatchLogicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLogicalThingResponse, error)

	PatchLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PatchLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLogicalThingResponse, error)

	// PutLogicalThingWithBodyWithResponse request with any body
	PutLogicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLogicalThingResponse, error)

	PutLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PutLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLogicalThingResponse, error)

	// GetPhysicalThingsWithResponse request
	GetPhysicalThingsWithResponse(ctx context.Context, params *GetPhysicalThingsParams, reqEditors ...RequestEditorFn) (*GetPhysicalThingsResponse, error)

	// PostPhysicalThingsWithBodyWithResponse request with any body
	PostPhysicalThingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhysicalThingsResponse, error)

	PostPhysicalThingsWithResponse(ctx context.Context, body PostPhysicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPhysicalThingsResponse, error)

	// DeletePhysicalThingWithResponse request
	DeletePhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeletePhysicalThingResponse, error)

	// GetPhysicalThingWithResponse request
	GetPhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetPhysicalThingResponse, error)

	// PatchPhysicalThingWithBodyWithResponse request with any body
	PatchPhysicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPhysicalThingResponse, error)

	PatchPhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PatchPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPhysicalThingResponse, error)

	// PutPhysicalThingWithBodyWithResponse request with any body
	PutPhysicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPhysicalThingResponse, error)

	PutPhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PutPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPhysicalThingResponse, error)
}

type GetFuzzesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string `json:"error,omitempty"`
		Objects *[]Fuzz `json:"objects,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFuzzesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFuzzesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFuzzesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string `json:"error,omitempty"`
		Objects *[]Fuzz `json:"objects,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostFuzzesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFuzzesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFuzzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteFuzzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFuzzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFuzzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string `json:"error,omitempty"`
		Objects *[]Fuzz `json:"objects,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFuzzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFuzzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFuzzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string `json:"error,omitempty"`
		Objects *[]Fuzz `json:"objects,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchFuzzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFuzzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutFuzzResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string `json:"error,omitempty"`
		Objects *[]Fuzz `json:"objects,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutFuzzResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutFuzzResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationHistoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string            `json:"error,omitempty"`
		Objects *[]LocationHistory `json:"objects,omitempty"`
		Status  int32              `json:"status"`
		Success bool               `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLocationHistoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationHistoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLocationHistoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string            `json:"error,omitempty"`
		Objects *[]LocationHistory `json:"objects,omitempty"`
		Status  int32              `json:"status"`
		Success bool               `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLocationHistoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLocationHistoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocationHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteLocationHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocationHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string            `json:"error,omitempty"`
		Objects *[]LocationHistory `json:"objects,omitempty"`
		Status  int32              `json:"status"`
		Success bool               `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLocationHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLocationHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string            `json:"error,omitempty"`
		Objects *[]LocationHistory `json:"objects,omitempty"`
		Status  int32              `json:"status"`
		Success bool               `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchLocationHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLocationHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLocationHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string            `json:"error,omitempty"`
		Objects *[]LocationHistory `json:"objects,omitempty"`
		Status  int32              `json:"status"`
		Success bool               `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutLocationHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLocationHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogicalThingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string         `json:"error,omitempty"`
		Objects *[]LogicalThing `json:"objects,omitempty"`
		Status  int32           `json:"status"`
		Success bool            `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLogicalThingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogicalThingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLogicalThingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string         `json:"error,omitempty"`
		Objects *[]LogicalThing `json:"objects,omitempty"`
		Status  int32           `json:"status"`
		Success bool            `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostLogicalThingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLogicalThingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLogicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteLogicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLogicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string         `json:"error,omitempty"`
		Objects *[]LogicalThing `json:"objects,omitempty"`
		Status  int32           `json:"status"`
		Success bool            `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLogicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchLogicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string         `json:"error,omitempty"`
		Objects *[]LogicalThing `json:"objects,omitempty"`
		Status  int32           `json:"status"`
		Success bool            `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchLogicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchLogicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLogicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string         `json:"error,omitempty"`
		Objects *[]LogicalThing `json:"objects,omitempty"`
		Status  int32           `json:"status"`
		Success bool            `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutLogicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLogicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPhysicalThingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string          `json:"error,omitempty"`
		Objects *[]PhysicalThing `json:"objects,omitempty"`
		Status  int32            `json:"status"`
		Success bool             `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPhysicalThingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPhysicalThingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPhysicalThingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string          `json:"error,omitempty"`
		Objects *[]PhysicalThing `json:"objects,omitempty"`
		Status  int32            `json:"status"`
		Success bool             `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PostPhysicalThingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPhysicalThingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePhysicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletePhysicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePhysicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPhysicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string          `json:"error,omitempty"`
		Objects *[]PhysicalThing `json:"objects,omitempty"`
		Status  int32            `json:"status"`
		Success bool             `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPhysicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPhysicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchPhysicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string          `json:"error,omitempty"`
		Objects *[]PhysicalThing `json:"objects,omitempty"`
		Status  int32            `json:"status"`
		Success bool             `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchPhysicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchPhysicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPhysicalThingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Error   *string          `json:"error,omitempty"`
		Objects *[]PhysicalThing `json:"objects,omitempty"`
		Status  int32            `json:"status"`
		Success bool             `json:"success"`
	}
	JSONDefault *struct {
		Error   *string `json:"error,omitempty"`
		Status  int32   `json:"status"`
		Success bool    `json:"success"`
	}
}

// Status returns HTTPResponse.Status
func (r PutPhysicalThingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPhysicalThingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFuzzesWithResponse request returning *GetFuzzesResponse
func (c *ClientWithResponses) GetFuzzesWithResponse(ctx context.Context, params *GetFuzzesParams, reqEditors ...RequestEditorFn) (*GetFuzzesResponse, error) {
	rsp, err := c.GetFuzzes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFuzzesResponse(rsp)
}

// PostFuzzesWithBodyWithResponse request with arbitrary body returning *PostFuzzesResponse
func (c *ClientWithResponses) PostFuzzesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFuzzesResponse, error) {
	rsp, err := c.PostFuzzesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFuzzesResponse(rsp)
}

func (c *ClientWithResponses) PostFuzzesWithResponse(ctx context.Context, body PostFuzzesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFuzzesResponse, error) {
	rsp, err := c.PostFuzzes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFuzzesResponse(rsp)
}

// DeleteFuzzWithResponse request returning *DeleteFuzzResponse
func (c *ClientWithResponses) DeleteFuzzWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteFuzzResponse, error) {
	rsp, err := c.DeleteFuzz(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFuzzResponse(rsp)
}

// GetFuzzWithResponse request returning *GetFuzzResponse
func (c *ClientWithResponses) GetFuzzWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetFuzzResponse, error) {
	rsp, err := c.GetFuzz(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFuzzResponse(rsp)
}

// PatchFuzzWithBodyWithResponse request with arbitrary body returning *PatchFuzzResponse
func (c *ClientWithResponses) PatchFuzzWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFuzzResponse, error) {
	rsp, err := c.PatchFuzzWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFuzzResponse(rsp)
}

func (c *ClientWithResponses) PatchFuzzWithResponse(ctx context.Context, primaryKey interface{}, body PatchFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFuzzResponse, error) {
	rsp, err := c.PatchFuzz(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchFuzzResponse(rsp)
}

// PutFuzzWithBodyWithResponse request with arbitrary body returning *PutFuzzResponse
func (c *ClientWithResponses) PutFuzzWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutFuzzResponse, error) {
	rsp, err := c.PutFuzzWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFuzzResponse(rsp)
}

func (c *ClientWithResponses) PutFuzzWithResponse(ctx context.Context, primaryKey interface{}, body PutFuzzJSONRequestBody, reqEditors ...RequestEditorFn) (*PutFuzzResponse, error) {
	rsp, err := c.PutFuzz(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutFuzzResponse(rsp)
}

// GetLocationHistoriesWithResponse request returning *GetLocationHistoriesResponse
func (c *ClientWithResponses) GetLocationHistoriesWithResponse(ctx context.Context, params *GetLocationHistoriesParams, reqEditors ...RequestEditorFn) (*GetLocationHistoriesResponse, error) {
	rsp, err := c.GetLocationHistories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationHistoriesResponse(rsp)
}

// PostLocationHistoriesWithBodyWithResponse request with arbitrary body returning *PostLocationHistoriesResponse
func (c *ClientWithResponses) PostLocationHistoriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocationHistoriesResponse, error) {
	rsp, err := c.PostLocationHistoriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocationHistoriesResponse(rsp)
}

func (c *ClientWithResponses) PostLocationHistoriesWithResponse(ctx context.Context, body PostLocationHistoriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocationHistoriesResponse, error) {
	rsp, err := c.PostLocationHistories(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocationHistoriesResponse(rsp)
}

// DeleteLocationHistoryWithResponse request returning *DeleteLocationHistoryResponse
func (c *ClientWithResponses) DeleteLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteLocationHistoryResponse, error) {
	rsp, err := c.DeleteLocationHistory(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocationHistoryResponse(rsp)
}

// GetLocationHistoryWithResponse request returning *GetLocationHistoryResponse
func (c *ClientWithResponses) GetLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetLocationHistoryResponse, error) {
	rsp, err := c.GetLocationHistory(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationHistoryResponse(rsp)
}

// PatchLocationHistoryWithBodyWithResponse request with arbitrary body returning *PatchLocationHistoryResponse
func (c *ClientWithResponses) PatchLocationHistoryWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLocationHistoryResponse, error) {
	rsp, err := c.PatchLocationHistoryWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLocationHistoryResponse(rsp)
}

func (c *ClientWithResponses) PatchLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, body PatchLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLocationHistoryResponse, error) {
	rsp, err := c.PatchLocationHistory(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLocationHistoryResponse(rsp)
}

// PutLocationHistoryWithBodyWithResponse request with arbitrary body returning *PutLocationHistoryResponse
func (c *ClientWithResponses) PutLocationHistoryWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLocationHistoryResponse, error) {
	rsp, err := c.PutLocationHistoryWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLocationHistoryResponse(rsp)
}

func (c *ClientWithResponses) PutLocationHistoryWithResponse(ctx context.Context, primaryKey interface{}, body PutLocationHistoryJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLocationHistoryResponse, error) {
	rsp, err := c.PutLocationHistory(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLocationHistoryResponse(rsp)
}

// GetLogicalThingsWithResponse request returning *GetLogicalThingsResponse
func (c *ClientWithResponses) GetLogicalThingsWithResponse(ctx context.Context, params *GetLogicalThingsParams, reqEditors ...RequestEditorFn) (*GetLogicalThingsResponse, error) {
	rsp, err := c.GetLogicalThings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogicalThingsResponse(rsp)
}

// PostLogicalThingsWithBodyWithResponse request with arbitrary body returning *PostLogicalThingsResponse
func (c *ClientWithResponses) PostLogicalThingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLogicalThingsResponse, error) {
	rsp, err := c.PostLogicalThingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLogicalThingsResponse(rsp)
}

func (c *ClientWithResponses) PostLogicalThingsWithResponse(ctx context.Context, body PostLogicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLogicalThingsResponse, error) {
	rsp, err := c.PostLogicalThings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLogicalThingsResponse(rsp)
}

// DeleteLogicalThingWithResponse request returning *DeleteLogicalThingResponse
func (c *ClientWithResponses) DeleteLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeleteLogicalThingResponse, error) {
	rsp, err := c.DeleteLogicalThing(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLogicalThingResponse(rsp)
}

// GetLogicalThingWithResponse request returning *GetLogicalThingResponse
func (c *ClientWithResponses) GetLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetLogicalThingResponse, error) {
	rsp, err := c.GetLogicalThing(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogicalThingResponse(rsp)
}

// PatchLogicalThingWithBodyWithResponse request with arbitrary body returning *PatchLogicalThingResponse
func (c *ClientWithResponses) PatchLogicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchLogicalThingResponse, error) {
	rsp, err := c.PatchLogicalThingWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLogicalThingResponse(rsp)
}

func (c *ClientWithResponses) PatchLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PatchLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchLogicalThingResponse, error) {
	rsp, err := c.PatchLogicalThing(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchLogicalThingResponse(rsp)
}

// PutLogicalThingWithBodyWithResponse request with arbitrary body returning *PutLogicalThingResponse
func (c *ClientWithResponses) PutLogicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLogicalThingResponse, error) {
	rsp, err := c.PutLogicalThingWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLogicalThingResponse(rsp)
}

func (c *ClientWithResponses) PutLogicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PutLogicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLogicalThingResponse, error) {
	rsp, err := c.PutLogicalThing(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLogicalThingResponse(rsp)
}

// GetPhysicalThingsWithResponse request returning *GetPhysicalThingsResponse
func (c *ClientWithResponses) GetPhysicalThingsWithResponse(ctx context.Context, params *GetPhysicalThingsParams, reqEditors ...RequestEditorFn) (*GetPhysicalThingsResponse, error) {
	rsp, err := c.GetPhysicalThings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPhysicalThingsResponse(rsp)
}

// PostPhysicalThingsWithBodyWithResponse request with arbitrary body returning *PostPhysicalThingsResponse
func (c *ClientWithResponses) PostPhysicalThingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPhysicalThingsResponse, error) {
	rsp, err := c.PostPhysicalThingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPhysicalThingsResponse(rsp)
}

func (c *ClientWithResponses) PostPhysicalThingsWithResponse(ctx context.Context, body PostPhysicalThingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPhysicalThingsResponse, error) {
	rsp, err := c.PostPhysicalThings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPhysicalThingsResponse(rsp)
}

// DeletePhysicalThingWithResponse request returning *DeletePhysicalThingResponse
func (c *ClientWithResponses) DeletePhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*DeletePhysicalThingResponse, error) {
	rsp, err := c.DeletePhysicalThing(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePhysicalThingResponse(rsp)
}

// GetPhysicalThingWithResponse request returning *GetPhysicalThingResponse
func (c *ClientWithResponses) GetPhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, reqEditors ...RequestEditorFn) (*GetPhysicalThingResponse, error) {
	rsp, err := c.GetPhysicalThing(ctx, primaryKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPhysicalThingResponse(rsp)
}

// PatchPhysicalThingWithBodyWithResponse request with arbitrary body returning *PatchPhysicalThingResponse
func (c *ClientWithResponses) PatchPhysicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchPhysicalThingResponse, error) {
	rsp, err := c.PatchPhysicalThingWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPhysicalThingResponse(rsp)
}

func (c *ClientWithResponses) PatchPhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PatchPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchPhysicalThingResponse, error) {
	rsp, err := c.PatchPhysicalThing(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchPhysicalThingResponse(rsp)
}

// PutPhysicalThingWithBodyWithResponse request with arbitrary body returning *PutPhysicalThingResponse
func (c *ClientWithResponses) PutPhysicalThingWithBodyWithResponse(ctx context.Context, primaryKey interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPhysicalThingResponse, error) {
	rsp, err := c.PutPhysicalThingWithBody(ctx, primaryKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPhysicalThingResponse(rsp)
}

func (c *ClientWithResponses) PutPhysicalThingWithResponse(ctx context.Context, primaryKey interface{}, body PutPhysicalThingJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPhysicalThingResponse, error) {
	rsp, err := c.PutPhysicalThing(ctx, primaryKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPhysicalThingResponse(rsp)
}

// ParseGetFuzzesResponse parses an HTTP response from a GetFuzzesWithResponse call
func ParseGetFuzzesResponse(rsp *http.Response) (*GetFuzzesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFuzzesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Objects *[]Fuzz `json:"objects,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostFuzzesResponse parses an HTTP response from a PostFuzzesWithResponse call
func ParsePostFuzzesResponse(rsp *http.Response) (*PostFuzzesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFuzzesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Objects *[]Fuzz `json:"objects,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteFuzzResponse parses an HTTP response from a DeleteFuzzWithResponse call
func ParseDeleteFuzzResponse(rsp *http.Response) (*DeleteFuzzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFuzzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetFuzzResponse parses an HTTP response from a GetFuzzWithResponse call
func ParseGetFuzzResponse(rsp *http.Response) (*GetFuzzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFuzzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Objects *[]Fuzz `json:"objects,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchFuzzResponse parses an HTTP response from a PatchFuzzWithResponse call
func ParsePatchFuzzResponse(rsp *http.Response) (*PatchFuzzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFuzzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Objects *[]Fuzz `json:"objects,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutFuzzResponse parses an HTTP response from a PutFuzzWithResponse call
func ParsePutFuzzResponse(rsp *http.Response) (*PutFuzzResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutFuzzResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Objects *[]Fuzz `json:"objects,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLocationHistoriesResponse parses an HTTP response from a GetLocationHistoriesWithResponse call
func ParseGetLocationHistoriesResponse(rsp *http.Response) (*GetLocationHistoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationHistoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string            `json:"error,omitempty"`
			Objects *[]LocationHistory `json:"objects,omitempty"`
			Status  int32              `json:"status"`
			Success bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLocationHistoriesResponse parses an HTTP response from a PostLocationHistoriesWithResponse call
func ParsePostLocationHistoriesResponse(rsp *http.Response) (*PostLocationHistoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLocationHistoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string            `json:"error,omitempty"`
			Objects *[]LocationHistory `json:"objects,omitempty"`
			Status  int32              `json:"status"`
			Success bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLocationHistoryResponse parses an HTTP response from a DeleteLocationHistoryWithResponse call
func ParseDeleteLocationHistoryResponse(rsp *http.Response) (*DeleteLocationHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocationHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLocationHistoryResponse parses an HTTP response from a GetLocationHistoryWithResponse call
func ParseGetLocationHistoryResponse(rsp *http.Response) (*GetLocationHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string            `json:"error,omitempty"`
			Objects *[]LocationHistory `json:"objects,omitempty"`
			Status  int32              `json:"status"`
			Success bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchLocationHistoryResponse parses an HTTP response from a PatchLocationHistoryWithResponse call
func ParsePatchLocationHistoryResponse(rsp *http.Response) (*PatchLocationHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLocationHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string            `json:"error,omitempty"`
			Objects *[]LocationHistory `json:"objects,omitempty"`
			Status  int32              `json:"status"`
			Success bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutLocationHistoryResponse parses an HTTP response from a PutLocationHistoryWithResponse call
func ParsePutLocationHistoryResponse(rsp *http.Response) (*PutLocationHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLocationHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string            `json:"error,omitempty"`
			Objects *[]LocationHistory `json:"objects,omitempty"`
			Status  int32              `json:"status"`
			Success bool               `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogicalThingsResponse parses an HTTP response from a GetLogicalThingsWithResponse call
func ParseGetLogicalThingsResponse(rsp *http.Response) (*GetLogicalThingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogicalThingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string         `json:"error,omitempty"`
			Objects *[]LogicalThing `json:"objects,omitempty"`
			Status  int32           `json:"status"`
			Success bool            `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostLogicalThingsResponse parses an HTTP response from a PostLogicalThingsWithResponse call
func ParsePostLogicalThingsResponse(rsp *http.Response) (*PostLogicalThingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLogicalThingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string         `json:"error,omitempty"`
			Objects *[]LogicalThing `json:"objects,omitempty"`
			Status  int32           `json:"status"`
			Success bool            `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteLogicalThingResponse parses an HTTP response from a DeleteLogicalThingWithResponse call
func ParseDeleteLogicalThingResponse(rsp *http.Response) (*DeleteLogicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLogicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetLogicalThingResponse parses an HTTP response from a GetLogicalThingWithResponse call
func ParseGetLogicalThingResponse(rsp *http.Response) (*GetLogicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string         `json:"error,omitempty"`
			Objects *[]LogicalThing `json:"objects,omitempty"`
			Status  int32           `json:"status"`
			Success bool            `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchLogicalThingResponse parses an HTTP response from a PatchLogicalThingWithResponse call
func ParsePatchLogicalThingResponse(rsp *http.Response) (*PatchLogicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchLogicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string         `json:"error,omitempty"`
			Objects *[]LogicalThing `json:"objects,omitempty"`
			Status  int32           `json:"status"`
			Success bool            `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutLogicalThingResponse parses an HTTP response from a PutLogicalThingWithResponse call
func ParsePutLogicalThingResponse(rsp *http.Response) (*PutLogicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLogicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string         `json:"error,omitempty"`
			Objects *[]LogicalThing `json:"objects,omitempty"`
			Status  int32           `json:"status"`
			Success bool            `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPhysicalThingsResponse parses an HTTP response from a GetPhysicalThingsWithResponse call
func ParseGetPhysicalThingsResponse(rsp *http.Response) (*GetPhysicalThingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPhysicalThingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string          `json:"error,omitempty"`
			Objects *[]PhysicalThing `json:"objects,omitempty"`
			Status  int32            `json:"status"`
			Success bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostPhysicalThingsResponse parses an HTTP response from a PostPhysicalThingsWithResponse call
func ParsePostPhysicalThingsResponse(rsp *http.Response) (*PostPhysicalThingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPhysicalThingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string          `json:"error,omitempty"`
			Objects *[]PhysicalThing `json:"objects,omitempty"`
			Status  int32            `json:"status"`
			Success bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeletePhysicalThingResponse parses an HTTP response from a DeletePhysicalThingWithResponse call
func ParseDeletePhysicalThingResponse(rsp *http.Response) (*DeletePhysicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePhysicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetPhysicalThingResponse parses an HTTP response from a GetPhysicalThingWithResponse call
func ParseGetPhysicalThingResponse(rsp *http.Response) (*GetPhysicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPhysicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string          `json:"error,omitempty"`
			Objects *[]PhysicalThing `json:"objects,omitempty"`
			Status  int32            `json:"status"`
			Success bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePatchPhysicalThingResponse parses an HTTP response from a PatchPhysicalThingWithResponse call
func ParsePatchPhysicalThingResponse(rsp *http.Response) (*PatchPhysicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchPhysicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string          `json:"error,omitempty"`
			Objects *[]PhysicalThing `json:"objects,omitempty"`
			Status  int32            `json:"status"`
			Success bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePutPhysicalThingResponse parses an HTTP response from a PutPhysicalThingWithResponse call
func ParsePutPhysicalThingResponse(rsp *http.Response) (*PutPhysicalThingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPhysicalThingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Error   *string          `json:"error,omitempty"`
			Objects *[]PhysicalThing `json:"objects,omitempty"`
			Status  int32            `json:"status"`
			Success bool             `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			Error   *string `json:"error,omitempty"`
			Status  int32   `json:"status"`
			Success bool    `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+ydX3PjNpbFv4qWM/vmji2SY8mu0stOtme60pXpnUmqdjebctEUbDOBSIWEOlG7/N23",
	"+Ec2IZGgKIHEudV46rZbJH66wAXuaYI4z06YrNZJzGKRObfPThY+sVVQ/PX95suX/M91mqxZKiJW/DZM",
	"+GYVT/O/PiTpKhDOrbMMBHsnohVzLpx4w3lwz5lzK9INu3DEds2cWycTaRQ/Oi8XuxtcObfPbz9NpZ9c",
	"6e5RLK799jtHsWCPLK3d2jvvcv+8y/8ifZVr6aeZ9NNc+ulGDmmyyRtrbTferO7rzbrndoh7dV770/Mu",
	"d8+73KuH0i16sProfZJwFsS1z+Yd5ATLZSSiJA74J2l4R4Ktsv0B4LlOU4dXvwnSNNjWfk7uf2GhqDV4",
	"Ld1vs4mWPbplpqLtvEkb0vwwsf+7uQcOIv4/R31O0faNFOexIfY7rYTyFNHc/wLe1dDcF87/nhlkb0qA",
	"cW+aX3/2j88LT57k77eix1zn9+jtv0ijtS3B9obT9SkXzRo/W/7bXPFvN+XcFy2bppm9a5p642MSBvnk",
	"8vcoE0m6bVjyUxYItrzL79uyyBygLRlnHdd0dtZR3+jCWQcpi8Xd+mmbRWHA78RTFD/eNV/c2Wbbze6q",
	"eN0+O39O2YNz6/zp8q1yuqzKpsvvq/t/qq7/4Wl33ySKhYn5bp3w7WMSQ825+QDIRLBaHz+eNutlzzHY",
	"PNQf33oFZpyzPwRL44BXY/bUPFgxESwDEegtGOJgxRqpqkzhZUi1ZN3+vXomndS7VCaGNPj9btdrnUuS",
	"CB6zfktL+fPzUAnVGHqbWDaxbGLpSSz5a9nMOiuzaA8JOxTsUCiA8l9F8UNSNBCJHNz59pcgfkx4ED86",
	"F85nlmZRXvM702+u8laTNYuDdeTcOt43V99cOfmsK56Kr3L5sPnypQzvIyug8ogXgvDD0rl1/sbE+/IT",
	"xVQdrJhgaebc/vTsLFkWptFalE39678+ThaT8uIkdXJE59b5bcPSrbPrCCda3t2x35yL6v+Zj1KsTQ39",
	"21Etxez8lv5vc3XlsdfWLiarYDuJEzH5PUl/nfweiadJwPmklOKT/JaZguhR6CJa6EPSFaVQFxLXFaVw",
	"oQ9JQ5Q+fF/DWbN0FYlsEiarVfAuY3lyCbacfA74RokSxeeTfP+PHzTRxGA4idAB9OFfk+9//PixRlS0",
	"PImySfQYJylbqjooy1cUPRD/+OEMkBiGJMriROhh+fjhu/9shFiteRRGgm8n65Q9RH+w5SSIl5Ns81D+",
	"UKT8v6tyHBou+pXpSbThGGOOT0ghjInQg/lhOMaIg+Np6+cBKeOIU2AkEcpEaALtVBbVfo12IaMUc6ep",
	"mdc22yRN7zb16ZpXtjZxcyLbQjOc1siFWuG41siFC81wuiJ3fon/CtVW5Pdm0iM93vITFqxdGPXvx1PV",
	"0Vv3KYTJSTgnq5Naz+Exdcim3lTDrL9vMwURzNY64aQkHZg25pRYaYVWJbT6p/zAtBEnA6p3FAzNG0ec",
	"Fi2x8CqlWW/kI7WSa0CfucD6zEXWZy6yPnOR9ZmLqM9cUH3mouozF0qfuXj6zAXUZy4tfebS0GcuKX3m",
	"EtJnLi195pLSZy4VfeYS02cuKX3mUtNnril9NjvQZ1ql2OxAihlRXbMD1WVGYM0OBZYRLTU70FJmZNPs",
	"UDaNqpBmBwppdM0xOxRDRhgOdM8YEmfWKHHGUg6zZjUzYvPNwsV48T/b1ygQRPtrI0R5PDtQHjhYsAFr",
	"0BPmK/LZgXQAYTq5G4dGiyMOC4YbtKYyX2dFPx+2op9jVPRzkIp+DlLRz0Eq+rnhin5uvqKfA1T0c1MV",
	"/dxoRT83W9HPYSv6OVxFP0et6OeYFf0ctqKfo1b0c8CKfo5b0c9RK/o5cEU/H6Ginyo2Ue3ORd0/FvPM",
	"N1wUW6j6taj9/RbFBqpTyBa60fRFLdSLxvVFLVzoRtMSNW2vaSg2TvUj0vryiGrblGGs9k1TPXvwzDda",
	"OrZM9Yc5992Rrg1TRog6tkv1Yxp013L7ZikwyNbn9v0Tc2jWmNMhpRRW1Sapnmk+NGvEiWBq7P/BaeOI",
	"U2IlFVrl1qh+wMcqIG90zeXBai4PV3N5uJrLw9VcHp7m8iA1l4epuTwgzeWhaS4PTnN5lDSXR0FzeYQ0",
	"l0dGc3mUNJdHSHN5NDSXR0pzeYQ0l0dLc3lmNJc/uubyYTWXj6u5fFzN5eNqLh9Pc/mQmsvH1Fw+kOby",
	"0TSXD6e5fEqay6eguXxCmssno7l8SprLJ6S5fBqayyeluXxCmsunpbl8M5rrRnFAW6u36Fma60ZxPFuv",
	"FrVrrhvF4WwnkC10o+mLWqgXjeuLWrjQjaYlatpkxI3iULZeRFrFzY3qSDazWIoD2fr14Jma66bjOLbe",
	"MOcqnJuuw9hMEHUdxdaLadD19qb9IDYsyPYzgXon5tCsMadDSimsygPY+qX50KwRJ4Kpsf8Hp40jTomV",
	"VGjVx671Aj72fOqrsTVX3iKm5srJQDVXiQapuXI0UM1VokFprhwJT9wUOQmKBaK5io5DUjhln6ERkdFc",
	"xdxAApKIOCjGI6dDSimsRDRXMQFwIphUhEE5z3NKrKRCa0BzTUfXXFNYzTXF1VxTXM01xdVcUzzNNYXU",
	"XFNMzTUF0lxTNM01hdNcU0qaa0pBc00Jaa4pGc01paS5poQ015SG5pqS0lxTQpprSktzTc1oLnd0zeXC",
	"ai4XV3O5uJrLxdVcLp7mciE1l4upuVwgzeWiaS4XTnO5lDSXS0FzuYQ0l0tGc7mUNJdLSHO5NDSXS0pz",
	"uYQ0l0tLc7lmNJffZv90nyScBfHZEstvM4DqaEC7ovLbLKCOAlnoJjk5JqFeEn5yTMKFbpJTYqKtwPfb",
	"rKA6ALSqDL/VDGpsijY7qK7uOFPa+CpDqCPaPlc3+EpLqHEAlKZQHQiDrlF+iy2UaaYWN5UjUmZotJjD",
	"ggEHrd0eqisBh0aLOCbV6Z05OFwccWA05MApjKI6+I4tzq/bn7hsNtHyTWzoMYPN22t73tKnPe3a4Lr9",
	"aUt/roVuMF0RC/WCcV0RCxe6wTRETFsxfd3+lKUPj9YC/1rxjMUoVPsTll59d6YIuVY/X+mLcq4kuO54",
	"umKAp+PZSh+iQZfR69YnK1CIrf/p1zcZhyaNORVOOiFVPVHpldpDk0acBKS2nh+cNY44HVJCYVU+R+mD",
	"e6Su8VSOu+vPvm4d5an8dnu0p1tHeSq33d5cC91guiIW6gXjuiIWLnSDaYiYLnngqVx2e/DolCye0mPX",
	"JJTi5PE+fXeejvK6/HV7opypW7xOd93xebrOHO9BNOSq6imcdZEQ2w/D7ZmMQ5PGnAonnZAqTxrvk9pD",
	"k0acBKS2nh+cNY44HVJCYVWfL94D91hdo3DRvd8Kpl1HKTx0+7SnXUcpHHT7cy10g+mKWKgXjOuKWLjQ",
	"DaYhYtrkgcI5tw+PVsmi8s01CtWuo3r13Zk6qsMzty/KubqlyzHXAE+HjupDNOiq2u6WC4XYuuj3Tcah",
	"SWNOhZNOSFU6qldqD00acRKQ2np+cNY44nRICYVVqaNacH++cFKWrZM4Y1n+effqKv8jTGLBYpH/NVjn",
	"eEH+bS5/yfKv9Fy7/zrNv5GIyqtZmiZpbf/grpkLJ7n/hYWi+FAk2Kr4y59T9uDcOn+6DJPVOolZLLLL",
	"8s7Z5fvNly/5ddWNgjQNtvnPmQjEJtt3oPLcBgeqCyfbhCHLsuYNjU7KfttE+ap/+9Putm+X/Px6v5Lc",
	"eckv2evZ8rMPGz75GGVi8p6J8GnykKSTnJ5lTnHFQ7DhYpCYIsXifRBxtmyLQ96RwWOW373o2J9fLpx1",
	"khWxKDMiSuIPS+fW+ZRkorqqpGKZ+I9kue0VwDNGmBwMkW7Yi80QbRny15QFgtkUaQrEYY68XDiXD8W/",
	"Xj6v02gVpNvv2PYl51syzgQ7TJ9vi98X1184uQpdMcHS/Kb7y9Kn8oaTX9n2FWO3xKwD8fS2wrw17ezn",
	"Rm2laVpK/BK1ZUR8EGw1KYG/7hHRFoimWfORNUyaf2MCpcvt3HjC3FgMAFs9tMWhsXoIRPjUUD7kvzaY",
	"C6fVK91D2ZYlQ6bej+tlYBeh5kA0Jt+mqXLfCJt4NvF6Jd4/2ZoHoc285kg0KwKelEF49xRlIkmrb9xW",
	"F36sPv331w935OdRz9Gj5VhvdOYtYb3LmROBvcVZIkG9v5kjgb25WSJBvLOZo+C8GFnkGBiO4Tc0iw5C",
	"eBey7BsUEvj3MYsch4YDf2GwGG8cn5BCGMHfuCwSmoPjob8OWM7PnAIjiVCO+E5l8QhmeRcIhR9AINg7",
	"Ea10bgmuNdtqCtC3WY07g2t4rc4Ap+Et9PNpjV+om49rjV+40M+nK34aNsPWuFpPv++LpWmfbj1jkdkU",
	"vgG9O/TkrcT1flQd1X8K0ek7eKUuhMTqshHoCzbQbrP69EGHtP2061PSdnjgmBPDJRdgpb9A70lgeOCI",
	"U2LVOxxGQI4jTg6YXpDVxgN9qTul1qZ4mj26wqs3C6jw6niICk/mw1N4dT5EhSfz4Si8OheYipIyFpkN",
	"QeFJ/QgjpeQuhMSiofCk6YMOKQUBIo1RTgyXXIApKDxpeuCUWEmID3lR4OSA6QV5ZIVXvgY1usKrNwuo",
	"8Op4iApP5sNTeHU+RIUn8+EovDoXmIqSMhaZDUHhSf0II6XkLoTEoqHwpOmDDikFASKNUU4Ml1yAKSg8",
	"aXrglFhJiA95UeDkgOkFeWSFl98sE8FqParAq7UKqO9qdIjyTsLDU3c1PERxJ+HhaLsaFph8qucqMBqC",
	"sKt3IoyAkvoPkYqGqqvPG2RAKUiO+vjktGiphZeCoKtPDJwQKgmlIa0FnBovuRCPrOXWQcpicbd+2mZR",
	"GPA78RTFj3fjnSXS3j7WCSPtnGDnjqhAoU4jaQcFO6NEBQpxckk7IM4BIoo8JwFp+OwTRRcjnEOi6l1s",
	"PvjTUxSzD0Fk8CNCFOOYU+WmG3Lws1oUkwonCY1+GIlqleF0yQmH/ZSTYVDPJ5dP5dzSNTo5PF70q/c8",
	"aQhJ7SDX/Z5XO6E0nd46qClK58Ckcx4y8RyrOYTYJFseExNlljWfnNzTV2X/tj2POj+83KDbih1Uy2Ni",
	"0jF1H3fsNtpIsRO0Vr8Wm0rLI0LSVQQpDF3gskm/28RBMthCa3zzF5vIy2Ni0pXJLe4wNottFo/iJGPT",
	"eHlUUI4QTI9RGPB3xf/CddjMFJ/8ofygtZixFjPWYsZazFiLGWsxYy1mrMWMtZixFjPWYsZazFiLGWsx",
	"Yy1mrMWMtZixFjPWYsZazFiLGWsxYy1mrMWMtZixFjPWYsZazFiLGWsxYy1mrMWMtZixFjPWYsZazFiL",
	"GWsxYy1mrMWMtZixFjPWYsZazFiLGWsxYy1mrMWMtZixFjPWYsZazFiLGWsxc77CY38IlsYBbzqJWJOa",
	"k5rYk3MjKzcJZU+6ja3S9lhOjUuonYWfGpdwMQDLCXE5XzJIDHuCYUTlImcOCseBhBpWLcl9cahLhpcg",
	"e91gHKFZBhnUEXLKYlLtr6mGC215THFgNOjANUgUkxW+nKYclevkLh0DL444NBx28Jrkgx6lkP8xlEQo",
	"721WG5QMhkXBDsKoGighDMuAHYSR+r9s3FzBXeWDcYCRS/0q7CYK7F3EzbUNV9VXGQiGA1aOVuOGIzJh",
	"hgqsZK+Sj8MBodWZuxmSY1KBhmu4ejy/y1D1eHlvs/V4yWC4Ht9BGK3HSwjD9fgOwkg9XjZurhyu8sE4",
	"wMj1eBV2EzXxLuLm2oarx6sMBMMBKzKrccMRmTBDBVaPV8nH4YDQCszdDMkxqUDDNVw9bg2+rcG3Nfi2",
	"Bt/W4NsafFuDb2vwbQ2+rcG3Nfi2Bt/W4NsafA9j8H2WTq3sjUzJ1MPmIVXqISamSG3iRNSoh5yYErWJ",
	"E0mhHvLBab+GDKfAiCFPG/oXSP01dS00HhVt2jDt0COmIZMaxjAnik024DRkacN0wikyE1FHTYsLJwtO",
	"N+inKNKfYf2d3xx6CZk7f4wyMXnPRPhUuRjXfYa/PltndTgkQ+dadxeu7EnWZMueZAfezacao2sYhpTs",
	"0umm018LwwSbT7t8ao9He0Id2qNfPq/TaBWk2+/Y9iXHLs+0Ocy5b4vfS/frMEz/VN548ivbHlDuFrV1",
	"IJ5qa9orirOfUbXFrGm18kt0ldd++QXs+NnZ7LfHQzUhH2OljzQw7Lx7xrxbjBNbxkhpc1oZE4jwqaGO",
	"yX8NlDmnVVDHD3xbKI2RsD8W547bjN1lbHs8lCm7aRIeG2HT1aar1nT9J1vzILT5+pqvioColc1ue0Yl",
	"bXLWtnL1U/XR1/8+UObxUdszxtuJgbfpAnB/BeBWCsBdE0AbJLD2QoBte0DY4QCzmQFn3wKJLQrQuxEo",
	"bDzA32NAYjsBhZ0D4JsEaOwHoPDon8hT/pG3mNdNyUe0jZO80PFs4+p4iLZxMh+ebVydD9E2TubDsY2r",
	"c4FZs0kZi8yGYBsn9SOMP5vchZBYNGzjpOmDDikFVzNpjHJiuOQCTME2TpoeOCVWEo5m8qLAyQHTC/LI",
	"tnF1U/IRFZ7khY6n8Op4iApP5sNTeHU+RIUn8+EovDoXmIqSMhaZDUHhSf0II6XkLoTEoqHwpOmDDikF",
	"ASKNUU4Ml1yAKSg8aXrglFhJiA95UeDkgOkFeWSFVzclH1HhSV7oeAqvjoeo8GQ+PIVX50NUeDIfjsKr",
	"c4GpKCljkdkQFJ7UjzBSSu5CSCwaCk+aPuiQUhAg0hjlxHDJBZiCwpOmB06JlYT4kBcFTg6YXpBHVniS",
	"cfwwPpKyN71RO0kJxbCr5B6LUXNJicWwx+QeixGrSYnBnOGjnDkoHCP7T8p9YcIKcq8bjCPAmVLKKYtJ",
	"Bea7KI8pDowGHTgw30o5TTkqF5ot494Ey6HhsIM3nLVl6WU/jESofPKNaoOSwbAo2EEYVQMlhGEZsIMw",
	"Uv+XjZsruKt8MA4wcqlfhd1Egb2LuLm24ar6KgPBcMDK0WrccEQmzFCBlexV8nE4ILQ6czdDckwq0HAN",
	"V4+XXvbD1OOVT77RerxkMFyP7yCM1uMlhOF6fAdhpB4vGzdXDlf5YBxg5Hq8CruJmngXcXNtw9XjVQaC",
	"4YAVmdW44YhMmKECq8er5ONwQGgF5m6G5JhUoOE6ph5Hdf6QDpqm62C2d172V29hth+P2sHkco+rTcwO",
	"jiEf1MWsYyzSOe6fdFLVfLtsVnUERJFWDQf+9/Qyk+/Y08pj/2KDbmZf/SjqCohycj7KIQJqdNg5WKOn",
	"mU0edTzUhY3C1gwqf/Q7Je0Nf1s7jW1tZhO3IyDqzG1xN7NZa7N2UIczm7ZdEVFpnpeX/w8AAP//f7kr",
	"Gt1WAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
